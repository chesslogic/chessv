
/***************************************************************************

                                 ChessV

                  COPYRIGHT (C) 2012-2017 BY GREG STRONG

This file is part of ChessV.  ChessV is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as 
published by the Free Software Foundation, either version 3 of the License, 
or (at your option) any later version.

ChessV is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or 
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for 
more details; the file 'COPYING' contains the License text, but if for
some reason you need a copy, please visit <http://www.gnu.org/licenses/>.

****************************************************************************/

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\greg\workspace\ChessVCParser\ChessVC.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ChessVCParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public interface IChessVCListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.chunk"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterChunk([NotNull] ChessVCParser.ChunkContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.chunk"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitChunk([NotNull] ChessVCParser.ChunkContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.unit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnit([NotNull] ChessVCParser.UnitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.unit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnit([NotNull] ChessVCParser.UnitContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PieceTypeDecl</c>
	/// labeled alternative in <see cref="ChessVCParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPieceTypeDecl([NotNull] ChessVCParser.PieceTypeDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PieceTypeDecl</c>
	/// labeled alternative in <see cref="ChessVCParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPieceTypeDecl([NotNull] ChessVCParser.PieceTypeDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>GameDecl</c>
	/// labeled alternative in <see cref="ChessVCParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGameDecl([NotNull] ChessVCParser.GameDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>GameDecl</c>
	/// labeled alternative in <see cref="ChessVCParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGameDecl([NotNull] ChessVCParser.GameDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.pieceTypeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPieceTypeDeclaration([NotNull] ChessVCParser.PieceTypeDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.pieceTypeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPieceTypeDeclaration([NotNull] ChessVCParser.PieceTypeDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.gameDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGameDeclaration([NotNull] ChessVCParser.GameDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.gameDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGameDeclaration([NotNull] ChessVCParser.GameDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberAssign</c>
	/// labeled alternative in <see cref="ChessVCParser.declMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberAssign([NotNull] ChessVCParser.MemberAssignContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberAssign</c>
	/// labeled alternative in <see cref="ChessVCParser.declMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberAssign([NotNull] ChessVCParser.MemberAssignContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FnDefinition</c>
	/// labeled alternative in <see cref="ChessVCParser.declMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFnDefinition([NotNull] ChessVCParser.FnDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FnDefinition</c>
	/// labeled alternative in <see cref="ChessVCParser.declMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFnDefinition([NotNull] ChessVCParser.FnDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberDefinition</c>
	/// labeled alternative in <see cref="ChessVCParser.declMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberDefinition([NotNull] ChessVCParser.MemberDefinitionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberDefinition</c>
	/// labeled alternative in <see cref="ChessVCParser.declMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberDefinition([NotNull] ChessVCParser.MemberDefinitionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.functionDefn"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDefn([NotNull] ChessVCParser.FunctionDefnContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.functionDefn"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDefn([NotNull] ChessVCParser.FunctionDefnContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.memberDefn"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberDefn([NotNull] ChessVCParser.MemberDefnContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.memberDefn"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberDefn([NotNull] ChessVCParser.MemberDefnContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockStatement([NotNull] ChessVCParser.BlockStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockStatement([NotNull] ChessVCParser.BlockStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] ChessVCParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] ChessVCParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignStatement([NotNull] ChessVCParser.AssignStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignStatement([NotNull] ChessVCParser.AssignStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FnCallStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFnCallStatement([NotNull] ChessVCParser.FnCallStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FnCallStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFnCallStatement([NotNull] ChessVCParser.FnCallStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] ChessVCParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] ChessVCParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] ChessVCParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] ChessVCParser.AssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] ChessVCParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] ChessVCParser.FunctionCallContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] ChessVCParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] ChessVCParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OpBitwiseOr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpBitwiseOr([NotNull] ChessVCParser.OpBitwiseOrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OpBitwiseOr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpBitwiseOr([NotNull] ChessVCParser.OpBitwiseOrContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OpEquality</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpEquality([NotNull] ChessVCParser.OpEqualityContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OpEquality</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpEquality([NotNull] ChessVCParser.OpEqualityContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstantExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantExpr([NotNull] ChessVCParser.ConstantExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstantExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantExpr([NotNull] ChessVCParser.ConstantExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryMinus</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryMinus([NotNull] ChessVCParser.UnaryMinusContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryMinus</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryMinus([NotNull] ChessVCParser.UnaryMinusContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ObjectIdExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectIdExpr([NotNull] ChessVCParser.ObjectIdExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ObjectIdExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectIdExpr([NotNull] ChessVCParser.ObjectIdExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OpAddSub</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpAddSub([NotNull] ChessVCParser.OpAddSubContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OpAddSub</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpAddSub([NotNull] ChessVCParser.OpAddSubContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryNot</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryNot([NotNull] ChessVCParser.UnaryNotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryNot</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryNot([NotNull] ChessVCParser.UnaryNotContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OpBitwiseXor</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpBitwiseXor([NotNull] ChessVCParser.OpBitwiseXorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OpBitwiseXor</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpBitwiseXor([NotNull] ChessVCParser.OpBitwiseXorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OpMultDivMod</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpMultDivMod([NotNull] ChessVCParser.OpMultDivModContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OpMultDivMod</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpMultDivMod([NotNull] ChessVCParser.OpMultDivModContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OpLogicalAnd</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpLogicalAnd([NotNull] ChessVCParser.OpLogicalAndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OpLogicalAnd</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpLogicalAnd([NotNull] ChessVCParser.OpLogicalAndContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OpComparison</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpComparison([NotNull] ChessVCParser.OpComparisonContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OpComparison</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpComparison([NotNull] ChessVCParser.OpComparisonContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OpBitwiseAnd</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpBitwiseAnd([NotNull] ChessVCParser.OpBitwiseAndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OpBitwiseAnd</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpBitwiseAnd([NotNull] ChessVCParser.OpBitwiseAndContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ListExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterListExpr([NotNull] ChessVCParser.ListExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ListExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitListExpr([NotNull] ChessVCParser.ListExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenExpr([NotNull] ChessVCParser.ParenExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenExpr([NotNull] ChessVCParser.ParenExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OpBitShift</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpBitShift([NotNull] ChessVCParser.OpBitShiftContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OpBitShift</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpBitShift([NotNull] ChessVCParser.OpBitShiftContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OpLogicalOr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpLogicalOr([NotNull] ChessVCParser.OpLogicalOrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OpLogicalOr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpLogicalOr([NotNull] ChessVCParser.OpLogicalOrContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>FnCallExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFnCallExpr([NotNull] ChessVCParser.FnCallExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>FnCallExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFnCallExpr([NotNull] ChessVCParser.FnCallExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.objectid"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterObjectid([NotNull] ChessVCParser.ObjectidContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.objectid"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitObjectid([NotNull] ChessVCParser.ObjectidContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstInt</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstInt([NotNull] ChessVCParser.ConstIntContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstInt</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstInt([NotNull] ChessVCParser.ConstIntContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstStr</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstStr([NotNull] ChessVCParser.ConstStrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstStr</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstStr([NotNull] ChessVCParser.ConstStrContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstRange</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstRange([NotNull] ChessVCParser.ConstRangeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstRange</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstRange([NotNull] ChessVCParser.ConstRangeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstDir</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstDir([NotNull] ChessVCParser.ConstDirContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstDir</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstDir([NotNull] ChessVCParser.ConstDirContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstBoolTrue</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstBoolTrue([NotNull] ChessVCParser.ConstBoolTrueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstBoolTrue</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstBoolTrue([NotNull] ChessVCParser.ConstBoolTrueContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstBoolFalse</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstBoolFalse([NotNull] ChessVCParser.ConstBoolFalseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstBoolFalse</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstBoolFalse([NotNull] ChessVCParser.ConstBoolFalseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstNull</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstNull([NotNull] ChessVCParser.ConstNullContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstNull</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstNull([NotNull] ChessVCParser.ConstNullContext context);
}
