//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\greg\workspace\ChessVCParser\ChessVC.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ChessVCParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public interface IChessVCListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.unit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnit([NotNull] ChessVCParser.UnitContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.unit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnit([NotNull] ChessVCParser.UnitContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclaration([NotNull] ChessVCParser.DeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclaration([NotNull] ChessVCParser.DeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.pieceTypeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPieceTypeDeclaration([NotNull] ChessVCParser.PieceTypeDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.pieceTypeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPieceTypeDeclaration([NotNull] ChessVCParser.PieceTypeDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.gameDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGameDeclaration([NotNull] ChessVCParser.GameDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.gameDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGameDeclaration([NotNull] ChessVCParser.GameDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.declMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclMember([NotNull] ChessVCParser.DeclMemberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.declMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclMember([NotNull] ChessVCParser.DeclMemberContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.constructorAssign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstructorAssign([NotNull] ChessVCParser.ConstructorAssignContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.constructorAssign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstructorAssign([NotNull] ChessVCParser.ConstructorAssignContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.functionDefn"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionDefn([NotNull] ChessVCParser.FunctionDefnContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.functionDefn"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionDefn([NotNull] ChessVCParser.FunctionDefnContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.memberDefn"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberDefn([NotNull] ChessVCParser.MemberDefnContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.memberDefn"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberDefn([NotNull] ChessVCParser.MemberDefnContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaID</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaprimary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLambdaID([NotNull] ChessVCParser.LambdaIDContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaID</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaprimary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLambdaID([NotNull] ChessVCParser.LambdaIDContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaConstBool</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaprimary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLambdaConstBool([NotNull] ChessVCParser.LambdaConstBoolContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaConstBool</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaprimary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLambdaConstBool([NotNull] ChessVCParser.LambdaConstBoolContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaConstInt</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaprimary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLambdaConstInt([NotNull] ChessVCParser.LambdaConstIntContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaConstInt</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaprimary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLambdaConstInt([NotNull] ChessVCParser.LambdaConstIntContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaPri</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLambdaPri([NotNull] ChessVCParser.LambdaPriContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaPri</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLambdaPri([NotNull] ChessVCParser.LambdaPriContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaEqualtiy</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLambdaEqualtiy([NotNull] ChessVCParser.LambdaEqualtiyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaEqualtiy</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLambdaEqualtiy([NotNull] ChessVCParser.LambdaEqualtiyContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaAnd</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLambdaAnd([NotNull] ChessVCParser.LambdaAndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaAnd</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLambdaAnd([NotNull] ChessVCParser.LambdaAndContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaParen</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLambdaParen([NotNull] ChessVCParser.LambdaParenContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaParen</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLambdaParen([NotNull] ChessVCParser.LambdaParenContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaDot</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLambdaDot([NotNull] ChessVCParser.LambdaDotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaDot</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLambdaDot([NotNull] ChessVCParser.LambdaDotContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaOr</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLambdaOr([NotNull] ChessVCParser.LambdaOrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaOr</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLambdaOr([NotNull] ChessVCParser.LambdaOrContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaAdd</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLambdaAdd([NotNull] ChessVCParser.LambdaAddContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaAdd</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLambdaAdd([NotNull] ChessVCParser.LambdaAddContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaCompare</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLambdaCompare([NotNull] ChessVCParser.LambdaCompareContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaCompare</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLambdaCompare([NotNull] ChessVCParser.LambdaCompareContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>theEmptyStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTheEmptyStatement([NotNull] ChessVCParser.TheEmptyStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>theEmptyStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTheEmptyStatement([NotNull] ChessVCParser.TheEmptyStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionStatement([NotNull] ChessVCParser.ExpressionStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionStatement([NotNull] ChessVCParser.ExpressionStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] ChessVCParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] ChessVCParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] ChessVCParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] ChessVCParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.embeddedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmbeddedStatement([NotNull] ChessVCParser.EmbeddedStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.embeddedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmbeddedStatement([NotNull] ChessVCParser.EmbeddedStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] ChessVCParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] ChessVCParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatementList([NotNull] ChessVCParser.StatementListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatementList([NotNull] ChessVCParser.StatementListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] ChessVCParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] ChessVCParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.ifBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfBody([NotNull] ChessVCParser.IfBodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.ifBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfBody([NotNull] ChessVCParser.IfBodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableDeclaration([NotNull] ChessVCParser.VariableDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableDeclaration([NotNull] ChessVCParser.VariableDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>literalExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExp([NotNull] ChessVCParser.LiteralExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>literalExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExp([NotNull] ChessVCParser.LiteralExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>simpleNameExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSimpleNameExp([NotNull] ChessVCParser.SimpleNameExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>simpleNameExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSimpleNameExp([NotNull] ChessVCParser.SimpleNameExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisExp([NotNull] ChessVCParser.ParenthesisExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisExp([NotNull] ChessVCParser.ParenthesisExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>predefTypeExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredefTypeExp([NotNull] ChessVCParser.PredefTypeExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>predefTypeExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredefTypeExp([NotNull] ChessVCParser.PredefTypeExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>fnCallExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFnCallExp([NotNull] ChessVCParser.FnCallExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>fnCallExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFnCallExp([NotNull] ChessVCParser.FnCallExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>memberAccExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMemberAccExp([NotNull] ChessVCParser.MemberAccExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>memberAccExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMemberAccExp([NotNull] ChessVCParser.MemberAccExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>postfixExprPassthrough</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostfixExprPassthrough([NotNull] ChessVCParser.PostfixExprPassthroughContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>postfixExprPassthrough</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostfixExprPassthrough([NotNull] ChessVCParser.PostfixExprPassthroughContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>postfixOpExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPostfixOpExp([NotNull] ChessVCParser.PostfixOpExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>postfixOpExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPostfixOpExp([NotNull] ChessVCParser.PostfixOpExpContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>indexExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIndexExp([NotNull] ChessVCParser.IndexExpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>indexExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIndexExp([NotNull] ChessVCParser.IndexExpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.unaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnaryExpr([NotNull] ChessVCParser.UnaryExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.unaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnaryExpr([NotNull] ChessVCParser.UnaryExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.multiplicativeExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiplicativeExpr([NotNull] ChessVCParser.MultiplicativeExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.multiplicativeExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiplicativeExpr([NotNull] ChessVCParser.MultiplicativeExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.additiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdditiveExpr([NotNull] ChessVCParser.AdditiveExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.additiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdditiveExpr([NotNull] ChessVCParser.AdditiveExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.relationalExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelationalExpr([NotNull] ChessVCParser.RelationalExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.relationalExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelationalExpr([NotNull] ChessVCParser.RelationalExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.equalityExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqualityExpr([NotNull] ChessVCParser.EqualityExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.equalityExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqualityExpr([NotNull] ChessVCParser.EqualityExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.conditionalAndExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalAndExpr([NotNull] ChessVCParser.ConditionalAndExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.conditionalAndExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalAndExpr([NotNull] ChessVCParser.ConditionalAndExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.conditionalOrExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalOrExpr([NotNull] ChessVCParser.ConditionalOrExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.conditionalOrExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalOrExpr([NotNull] ChessVCParser.ConditionalOrExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.conditionalExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConditionalExpr([NotNull] ChessVCParser.ConditionalExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.conditionalExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConditionalExpr([NotNull] ChessVCParser.ConditionalExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.assignmentExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignmentExpr([NotNull] ChessVCParser.AssignmentExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.assignmentExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignmentExpr([NotNull] ChessVCParser.AssignmentExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprPassthrough</c>
	/// labeled alternative in <see cref="ChessVCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprPassthrough([NotNull] ChessVCParser.ExprPassthroughContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprPassthrough</c>
	/// labeled alternative in <see cref="ChessVCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprPassthrough([NotNull] ChessVCParser.ExprPassthroughContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>exprApplyAttribute</c>
	/// labeled alternative in <see cref="ChessVCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExprApplyAttribute([NotNull] ChessVCParser.ExprApplyAttributeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>exprApplyAttribute</c>
	/// labeled alternative in <see cref="ChessVCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExprApplyAttribute([NotNull] ChessVCParser.ExprApplyAttributeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgumentList([NotNull] ChessVCParser.ArgumentListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgumentList([NotNull] ChessVCParser.ArgumentListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArgument([NotNull] ChessVCParser.ArgumentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArgument([NotNull] ChessVCParser.ArgumentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.predefinedType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredefinedType([NotNull] ChessVCParser.PredefinedTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.predefinedType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredefinedType([NotNull] ChessVCParser.PredefinedTypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifier([NotNull] ChessVCParser.IdentifierContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifier([NotNull] ChessVCParser.IdentifierContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstBoolTrue</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstBoolTrue([NotNull] ChessVCParser.ConstBoolTrueContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstBoolTrue</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstBoolTrue([NotNull] ChessVCParser.ConstBoolTrueContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstBoolFalse</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstBoolFalse([NotNull] ChessVCParser.ConstBoolFalseContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstBoolFalse</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstBoolFalse([NotNull] ChessVCParser.ConstBoolFalseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstInt</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstInt([NotNull] ChessVCParser.ConstIntContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstInt</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstInt([NotNull] ChessVCParser.ConstIntContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstStrg</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstStrg([NotNull] ChessVCParser.ConstStrgContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstStrg</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstStrg([NotNull] ChessVCParser.ConstStrgContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstChar</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstChar([NotNull] ChessVCParser.ConstCharContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstChar</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstChar([NotNull] ChessVCParser.ConstCharContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstRange</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstRange([NotNull] ChessVCParser.ConstRangeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstRange</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstRange([NotNull] ChessVCParser.ConstRangeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstDir</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstDir([NotNull] ChessVCParser.ConstDirContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstDir</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstDir([NotNull] ChessVCParser.ConstDirContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstList</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstList([NotNull] ChessVCParser.ConstListContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstList</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstList([NotNull] ChessVCParser.ConstListContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstLambda</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstLambda([NotNull] ChessVCParser.ConstLambdaContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstLambda</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstLambda([NotNull] ChessVCParser.ConstLambdaContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstSymmetry</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstSymmetry([NotNull] ChessVCParser.ConstSymmetryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstSymmetry</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstSymmetry([NotNull] ChessVCParser.ConstSymmetryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstNull</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstNull([NotNull] ChessVCParser.ConstNullContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstNull</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstNull([NotNull] ChessVCParser.ConstNullContext context);
}
