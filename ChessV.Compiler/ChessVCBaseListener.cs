//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\greg\workspace\ChessVCParser\ChessVC.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IChessVCListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class ChessVCBaseListener : IChessVCListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.unit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnit([NotNull] ChessVCParser.UnitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.unit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnit([NotNull] ChessVCParser.UnitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclaration([NotNull] ChessVCParser.DeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclaration([NotNull] ChessVCParser.DeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.pieceTypeDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPieceTypeDeclaration([NotNull] ChessVCParser.PieceTypeDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.pieceTypeDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPieceTypeDeclaration([NotNull] ChessVCParser.PieceTypeDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.gameDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGameDeclaration([NotNull] ChessVCParser.GameDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.gameDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGameDeclaration([NotNull] ChessVCParser.GameDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.declMember"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclMember([NotNull] ChessVCParser.DeclMemberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.declMember"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclMember([NotNull] ChessVCParser.DeclMemberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.constructorAssign"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstructorAssign([NotNull] ChessVCParser.ConstructorAssignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.constructorAssign"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstructorAssign([NotNull] ChessVCParser.ConstructorAssignContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.functionDefn"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionDefn([NotNull] ChessVCParser.FunctionDefnContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.functionDefn"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionDefn([NotNull] ChessVCParser.FunctionDefnContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.memberDefn"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberDefn([NotNull] ChessVCParser.MemberDefnContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.memberDefn"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberDefn([NotNull] ChessVCParser.MemberDefnContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaID</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaprimary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLambdaID([NotNull] ChessVCParser.LambdaIDContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaID</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaprimary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLambdaID([NotNull] ChessVCParser.LambdaIDContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaConstBool</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaprimary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLambdaConstBool([NotNull] ChessVCParser.LambdaConstBoolContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaConstBool</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaprimary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLambdaConstBool([NotNull] ChessVCParser.LambdaConstBoolContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaConstInt</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaprimary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLambdaConstInt([NotNull] ChessVCParser.LambdaConstIntContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaConstInt</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaprimary"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLambdaConstInt([NotNull] ChessVCParser.LambdaConstIntContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaPri</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLambdaPri([NotNull] ChessVCParser.LambdaPriContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaPri</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLambdaPri([NotNull] ChessVCParser.LambdaPriContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaEqualtiy</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLambdaEqualtiy([NotNull] ChessVCParser.LambdaEqualtiyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaEqualtiy</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLambdaEqualtiy([NotNull] ChessVCParser.LambdaEqualtiyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaAnd</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLambdaAnd([NotNull] ChessVCParser.LambdaAndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaAnd</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLambdaAnd([NotNull] ChessVCParser.LambdaAndContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaParen</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLambdaParen([NotNull] ChessVCParser.LambdaParenContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaParen</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLambdaParen([NotNull] ChessVCParser.LambdaParenContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaDot</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLambdaDot([NotNull] ChessVCParser.LambdaDotContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaDot</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLambdaDot([NotNull] ChessVCParser.LambdaDotContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaOr</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLambdaOr([NotNull] ChessVCParser.LambdaOrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaOr</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLambdaOr([NotNull] ChessVCParser.LambdaOrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaAdd</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLambdaAdd([NotNull] ChessVCParser.LambdaAddContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaAdd</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLambdaAdd([NotNull] ChessVCParser.LambdaAddContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>lambdaCompare</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLambdaCompare([NotNull] ChessVCParser.LambdaCompareContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>lambdaCompare</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLambdaCompare([NotNull] ChessVCParser.LambdaCompareContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>theEmptyStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTheEmptyStatement([NotNull] ChessVCParser.TheEmptyStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>theEmptyStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTheEmptyStatement([NotNull] ChessVCParser.TheEmptyStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionStatement([NotNull] ChessVCParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionStatement([NotNull] ChessVCParser.ExpressionStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] ChessVCParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] ChessVCParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStatement([NotNull] ChessVCParser.ReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStatement([NotNull] ChessVCParser.ReturnStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.embeddedStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEmbeddedStatement([NotNull] ChessVCParser.EmbeddedStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.embeddedStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEmbeddedStatement([NotNull] ChessVCParser.EmbeddedStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] ChessVCParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] ChessVCParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.statementList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatementList([NotNull] ChessVCParser.StatementListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.statementList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatementList([NotNull] ChessVCParser.StatementListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] ChessVCParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] ChessVCParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.ifBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfBody([NotNull] ChessVCParser.IfBodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.ifBody"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfBody([NotNull] ChessVCParser.IfBodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.variableDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableDeclaration([NotNull] ChessVCParser.VariableDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.variableDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableDeclaration([NotNull] ChessVCParser.VariableDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>literalExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralExp([NotNull] ChessVCParser.LiteralExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>literalExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralExp([NotNull] ChessVCParser.LiteralExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>simpleNameExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSimpleNameExp([NotNull] ChessVCParser.SimpleNameExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>simpleNameExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSimpleNameExp([NotNull] ChessVCParser.SimpleNameExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesisExp([NotNull] ChessVCParser.ParenthesisExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesisExp([NotNull] ChessVCParser.ParenthesisExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>predefTypeExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPredefTypeExp([NotNull] ChessVCParser.PredefTypeExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>predefTypeExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPredefTypeExp([NotNull] ChessVCParser.PredefTypeExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>fnCallExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFnCallExp([NotNull] ChessVCParser.FnCallExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>fnCallExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFnCallExp([NotNull] ChessVCParser.FnCallExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>memberAccExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberAccExp([NotNull] ChessVCParser.MemberAccExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>memberAccExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberAccExp([NotNull] ChessVCParser.MemberAccExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>postfixExprPassthrough</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPostfixExprPassthrough([NotNull] ChessVCParser.PostfixExprPassthroughContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>postfixExprPassthrough</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPostfixExprPassthrough([NotNull] ChessVCParser.PostfixExprPassthroughContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>postfixOpExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPostfixOpExp([NotNull] ChessVCParser.PostfixOpExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>postfixOpExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPostfixOpExp([NotNull] ChessVCParser.PostfixOpExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>indexExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIndexExp([NotNull] ChessVCParser.IndexExpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>indexExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIndexExp([NotNull] ChessVCParser.IndexExpContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.unaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryExpr([NotNull] ChessVCParser.UnaryExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.unaryExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryExpr([NotNull] ChessVCParser.UnaryExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.multiplicativeExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplicativeExpr([NotNull] ChessVCParser.MultiplicativeExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.multiplicativeExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplicativeExpr([NotNull] ChessVCParser.MultiplicativeExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.additiveExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdditiveExpr([NotNull] ChessVCParser.AdditiveExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.additiveExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdditiveExpr([NotNull] ChessVCParser.AdditiveExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.relationalExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelationalExpr([NotNull] ChessVCParser.RelationalExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.relationalExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelationalExpr([NotNull] ChessVCParser.RelationalExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.equalityExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEqualityExpr([NotNull] ChessVCParser.EqualityExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.equalityExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEqualityExpr([NotNull] ChessVCParser.EqualityExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.conditionalAndExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditionalAndExpr([NotNull] ChessVCParser.ConditionalAndExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.conditionalAndExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditionalAndExpr([NotNull] ChessVCParser.ConditionalAndExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.conditionalOrExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditionalOrExpr([NotNull] ChessVCParser.ConditionalOrExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.conditionalOrExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditionalOrExpr([NotNull] ChessVCParser.ConditionalOrExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.conditionalExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConditionalExpr([NotNull] ChessVCParser.ConditionalExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.conditionalExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConditionalExpr([NotNull] ChessVCParser.ConditionalExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.assignmentExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignmentExpr([NotNull] ChessVCParser.AssignmentExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.assignmentExpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignmentExpr([NotNull] ChessVCParser.AssignmentExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprPassthrough</c>
	/// labeled alternative in <see cref="ChessVCParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprPassthrough([NotNull] ChessVCParser.ExprPassthroughContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprPassthrough</c>
	/// labeled alternative in <see cref="ChessVCParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprPassthrough([NotNull] ChessVCParser.ExprPassthroughContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>exprApplyAttribute</c>
	/// labeled alternative in <see cref="ChessVCParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExprApplyAttribute([NotNull] ChessVCParser.ExprApplyAttributeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>exprApplyAttribute</c>
	/// labeled alternative in <see cref="ChessVCParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExprApplyAttribute([NotNull] ChessVCParser.ExprApplyAttributeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentList([NotNull] ChessVCParser.ArgumentListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentList([NotNull] ChessVCParser.ArgumentListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgument([NotNull] ChessVCParser.ArgumentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.argument"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgument([NotNull] ChessVCParser.ArgumentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.predefinedType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPredefinedType([NotNull] ChessVCParser.PredefinedTypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.predefinedType"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPredefinedType([NotNull] ChessVCParser.PredefinedTypeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifier([NotNull] ChessVCParser.IdentifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.identifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifier([NotNull] ChessVCParser.IdentifierContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstBoolTrue</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstBoolTrue([NotNull] ChessVCParser.ConstBoolTrueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstBoolTrue</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstBoolTrue([NotNull] ChessVCParser.ConstBoolTrueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstBoolFalse</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstBoolFalse([NotNull] ChessVCParser.ConstBoolFalseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstBoolFalse</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstBoolFalse([NotNull] ChessVCParser.ConstBoolFalseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstInt</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstInt([NotNull] ChessVCParser.ConstIntContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstInt</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstInt([NotNull] ChessVCParser.ConstIntContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstStrg</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstStrg([NotNull] ChessVCParser.ConstStrgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstStrg</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstStrg([NotNull] ChessVCParser.ConstStrgContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstChar</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstChar([NotNull] ChessVCParser.ConstCharContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstChar</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstChar([NotNull] ChessVCParser.ConstCharContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstRange</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstRange([NotNull] ChessVCParser.ConstRangeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstRange</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstRange([NotNull] ChessVCParser.ConstRangeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstDir</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstDir([NotNull] ChessVCParser.ConstDirContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstDir</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstDir([NotNull] ChessVCParser.ConstDirContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstList</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstList([NotNull] ChessVCParser.ConstListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstList</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstList([NotNull] ChessVCParser.ConstListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstLambda</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstLambda([NotNull] ChessVCParser.ConstLambdaContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstLambda</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstLambda([NotNull] ChessVCParser.ConstLambdaContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstSymmetry</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstSymmetry([NotNull] ChessVCParser.ConstSymmetryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstSymmetry</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstSymmetry([NotNull] ChessVCParser.ConstSymmetryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstNull</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstNull([NotNull] ChessVCParser.ConstNullContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstNull</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstNull([NotNull] ChessVCParser.ConstNullContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
