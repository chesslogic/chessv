
/***************************************************************************

                                 ChessV

                  COPYRIGHT (C) 2012-2017 BY GREG STRONG

This file is part of ChessV.  ChessV is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as 
published by the Free Software Foundation, either version 3 of the License, 
or (at your option) any later version.

ChessV is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or 
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for 
more details; the file 'COPYING' contains the License text, but if for
some reason you need a copy, please visit <http://www.gnu.org/licenses/>.

****************************************************************************/

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\greg\workspace\ChessVCParser\ChessVC.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IChessVCListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class ChessVCBaseListener : IChessVCListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.chunk"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterChunk([NotNull] ChessVCParser.ChunkContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.chunk"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitChunk([NotNull] ChessVCParser.ChunkContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.unit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnit([NotNull] ChessVCParser.UnitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.unit"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnit([NotNull] ChessVCParser.UnitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>PieceTypeDecl</c>
	/// labeled alternative in <see cref="ChessVCParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPieceTypeDecl([NotNull] ChessVCParser.PieceTypeDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>PieceTypeDecl</c>
	/// labeled alternative in <see cref="ChessVCParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPieceTypeDecl([NotNull] ChessVCParser.PieceTypeDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>GameDecl</c>
	/// labeled alternative in <see cref="ChessVCParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGameDecl([NotNull] ChessVCParser.GameDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>GameDecl</c>
	/// labeled alternative in <see cref="ChessVCParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGameDecl([NotNull] ChessVCParser.GameDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.pieceTypeDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPieceTypeDeclaration([NotNull] ChessVCParser.PieceTypeDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.pieceTypeDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPieceTypeDeclaration([NotNull] ChessVCParser.PieceTypeDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.gameDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGameDeclaration([NotNull] ChessVCParser.GameDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.gameDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGameDeclaration([NotNull] ChessVCParser.GameDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberAssign</c>
	/// labeled alternative in <see cref="ChessVCParser.declMember"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberAssign([NotNull] ChessVCParser.MemberAssignContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberAssign</c>
	/// labeled alternative in <see cref="ChessVCParser.declMember"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberAssign([NotNull] ChessVCParser.MemberAssignContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FnDefinition</c>
	/// labeled alternative in <see cref="ChessVCParser.declMember"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFnDefinition([NotNull] ChessVCParser.FnDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FnDefinition</c>
	/// labeled alternative in <see cref="ChessVCParser.declMember"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFnDefinition([NotNull] ChessVCParser.FnDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MemberDefinition</c>
	/// labeled alternative in <see cref="ChessVCParser.declMember"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberDefinition([NotNull] ChessVCParser.MemberDefinitionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MemberDefinition</c>
	/// labeled alternative in <see cref="ChessVCParser.declMember"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberDefinition([NotNull] ChessVCParser.MemberDefinitionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.functionDefn"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionDefn([NotNull] ChessVCParser.FunctionDefnContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.functionDefn"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionDefn([NotNull] ChessVCParser.FunctionDefnContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.memberDefn"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMemberDefn([NotNull] ChessVCParser.MemberDefnContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.memberDefn"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMemberDefn([NotNull] ChessVCParser.MemberDefnContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlockStatement([NotNull] ChessVCParser.BlockStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>BlockStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlockStatement([NotNull] ChessVCParser.BlockStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] ChessVCParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IfStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] ChessVCParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AssignStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignStatement([NotNull] ChessVCParser.AssignStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AssignStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignStatement([NotNull] ChessVCParser.AssignStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FnCallStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFnCallStatement([NotNull] ChessVCParser.FnCallStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FnCallStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFnCallStatement([NotNull] ChessVCParser.FnCallStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] ChessVCParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] ChessVCParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment([NotNull] ChessVCParser.AssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment([NotNull] ChessVCParser.AssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunctionCall([NotNull] ChessVCParser.FunctionCallContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.functionCall"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunctionCall([NotNull] ChessVCParser.FunctionCallContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArgumentList([NotNull] ChessVCParser.ArgumentListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.argumentList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArgumentList([NotNull] ChessVCParser.ArgumentListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>OpBitwiseOr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOpBitwiseOr([NotNull] ChessVCParser.OpBitwiseOrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>OpBitwiseOr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOpBitwiseOr([NotNull] ChessVCParser.OpBitwiseOrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>OpEquality</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOpEquality([NotNull] ChessVCParser.OpEqualityContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>OpEquality</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOpEquality([NotNull] ChessVCParser.OpEqualityContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstantExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstantExpr([NotNull] ChessVCParser.ConstantExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstantExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstantExpr([NotNull] ChessVCParser.ConstantExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryMinus</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryMinus([NotNull] ChessVCParser.UnaryMinusContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryMinus</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryMinus([NotNull] ChessVCParser.UnaryMinusContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ObjectIdExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectIdExpr([NotNull] ChessVCParser.ObjectIdExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ObjectIdExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectIdExpr([NotNull] ChessVCParser.ObjectIdExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>OpAddSub</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOpAddSub([NotNull] ChessVCParser.OpAddSubContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>OpAddSub</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOpAddSub([NotNull] ChessVCParser.OpAddSubContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>UnaryNot</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnaryNot([NotNull] ChessVCParser.UnaryNotContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>UnaryNot</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnaryNot([NotNull] ChessVCParser.UnaryNotContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>OpBitwiseXor</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOpBitwiseXor([NotNull] ChessVCParser.OpBitwiseXorContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>OpBitwiseXor</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOpBitwiseXor([NotNull] ChessVCParser.OpBitwiseXorContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>OpMultDivMod</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOpMultDivMod([NotNull] ChessVCParser.OpMultDivModContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>OpMultDivMod</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOpMultDivMod([NotNull] ChessVCParser.OpMultDivModContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>OpLogicalAnd</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOpLogicalAnd([NotNull] ChessVCParser.OpLogicalAndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>OpLogicalAnd</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOpLogicalAnd([NotNull] ChessVCParser.OpLogicalAndContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>OpComparison</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOpComparison([NotNull] ChessVCParser.OpComparisonContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>OpComparison</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOpComparison([NotNull] ChessVCParser.OpComparisonContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>OpBitwiseAnd</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOpBitwiseAnd([NotNull] ChessVCParser.OpBitwiseAndContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>OpBitwiseAnd</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOpBitwiseAnd([NotNull] ChessVCParser.OpBitwiseAndContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ListExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterListExpr([NotNull] ChessVCParser.ListExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ListExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitListExpr([NotNull] ChessVCParser.ListExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenExpr([NotNull] ChessVCParser.ParenExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenExpr([NotNull] ChessVCParser.ParenExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>OpBitShift</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOpBitShift([NotNull] ChessVCParser.OpBitShiftContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>OpBitShift</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOpBitShift([NotNull] ChessVCParser.OpBitShiftContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>OpLogicalOr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOpLogicalOr([NotNull] ChessVCParser.OpLogicalOrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>OpLogicalOr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOpLogicalOr([NotNull] ChessVCParser.OpLogicalOrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>FnCallExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFnCallExpr([NotNull] ChessVCParser.FnCallExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>FnCallExpr</c>
	/// labeled alternative in <see cref="ChessVCParser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFnCallExpr([NotNull] ChessVCParser.FnCallExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ChessVCParser.objectid"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterObjectid([NotNull] ChessVCParser.ObjectidContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ChessVCParser.objectid"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitObjectid([NotNull] ChessVCParser.ObjectidContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstInt</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstInt([NotNull] ChessVCParser.ConstIntContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstInt</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstInt([NotNull] ChessVCParser.ConstIntContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstStr</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstStr([NotNull] ChessVCParser.ConstStrContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstStr</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstStr([NotNull] ChessVCParser.ConstStrContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstRange</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstRange([NotNull] ChessVCParser.ConstRangeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstRange</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstRange([NotNull] ChessVCParser.ConstRangeContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstDir</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstDir([NotNull] ChessVCParser.ConstDirContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstDir</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstDir([NotNull] ChessVCParser.ConstDirContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstBoolTrue</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstBoolTrue([NotNull] ChessVCParser.ConstBoolTrueContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstBoolTrue</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstBoolTrue([NotNull] ChessVCParser.ConstBoolTrueContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstBoolFalse</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstBoolFalse([NotNull] ChessVCParser.ConstBoolFalseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstBoolFalse</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstBoolFalse([NotNull] ChessVCParser.ConstBoolFalseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ConstNull</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConstNull([NotNull] ChessVCParser.ConstNullContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ConstNull</c>
	/// labeled alternative in <see cref="ChessVCParser.constant"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConstNull([NotNull] ChessVCParser.ConstNullContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
