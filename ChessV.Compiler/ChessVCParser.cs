
/***************************************************************************

                                 ChessV

                  COPYRIGHT (C) 2012-2017 BY GREG STRONG

This file is part of ChessV.  ChessV is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as 
published by the Free Software Foundation, either version 3 of the License, 
or (at your option) any later version.

ChessV is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or 
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for 
more details; the file 'COPYING' contains the License text, but if for
some reason you need a copy, please visit <http://www.gnu.org/licenses/>.

****************************************************************************/

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\greg\workspace\ChessVCParser\ChessVC.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class ChessVCParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, IDENTIFIER=37, STRING=38, 
		INTEGER=39, LINE_COMMENT=40, COMMENT=41, WHITESPACE=42;
	public const int
		RULE_chunk = 0, RULE_unit = 1, RULE_declaration = 2, RULE_pieceTypeDeclaration = 3, 
		RULE_gameDeclaration = 4, RULE_declMember = 5, RULE_functionDefn = 6, 
		RULE_memberDefn = 7, RULE_statement = 8, RULE_block = 9, RULE_assignment = 10, 
		RULE_functionCall = 11, RULE_argumentList = 12, RULE_expr = 13, RULE_objectid = 14, 
		RULE_constant = 15;
	public static readonly string[] ruleNames = {
		"chunk", "unit", "declaration", "pieceTypeDeclaration", "gameDeclaration", 
		"declMember", "functionDefn", "memberDefn", "statement", "block", "assignment", 
		"functionCall", "argumentList", "expr", "objectid", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'PieceType'", "'{'", "'}'", "'Game'", "':'", "';'", "'if'", "'('", 
		"')'", "'else'", "'='", "','", "'-'", "'!'", "'*'", "'/'", "'%'", "'+'", 
		"'<<'", "'>>'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'&'", "'^'", 
		"'|'", "'&&'", "'||'", "'.'", "'..'", "'true'", "'false'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "IDENTIFIER", "STRING", "INTEGER", "LINE_COMMENT", "COMMENT", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ChessVC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ChessVCParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ChunkContext : ParserRuleContext {
		public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(ChessVCParser.Eof, 0); }
		public ChunkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chunk; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterChunk(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitChunk(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChunk(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChunkContext chunk() {
		ChunkContext _localctx = new ChunkContext(Context, State);
		EnterRule(_localctx, 0, RULE_chunk);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; unit();
			State = 33; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitContext : ParserRuleContext {
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 2, RULE_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__0 || _la==T__3) {
				{
				{
				State = 35; declaration();
				}
				}
				State = 40;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PieceTypeDeclContext : DeclarationContext {
		public PieceTypeDeclarationContext pieceTypeDeclaration() {
			return GetRuleContext<PieceTypeDeclarationContext>(0);
		}
		public PieceTypeDeclContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterPieceTypeDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitPieceTypeDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPieceTypeDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GameDeclContext : DeclarationContext {
		public GameDeclarationContext gameDeclaration() {
			return GetRuleContext<GameDeclarationContext>(0);
		}
		public GameDeclContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterGameDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitGameDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGameDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		try {
			State = 43;
			switch (TokenStream.La(1)) {
			case T__0:
				_localctx = new PieceTypeDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 41; pieceTypeDeclaration();
				}
				break;
			case T__3:
				_localctx = new GameDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 42; gameDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PieceTypeDeclarationContext : ParserRuleContext {
		public ObjectidContext objectid() {
			return GetRuleContext<ObjectidContext>(0);
		}
		public DeclMemberContext[] declMember() {
			return GetRuleContexts<DeclMemberContext>();
		}
		public DeclMemberContext declMember(int i) {
			return GetRuleContext<DeclMemberContext>(i);
		}
		public PieceTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pieceTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterPieceTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitPieceTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPieceTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PieceTypeDeclarationContext pieceTypeDeclaration() {
		PieceTypeDeclarationContext _localctx = new PieceTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_pieceTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; Match(T__0);
			State = 46; objectid();
			State = 47; Match(T__1);
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 48; declMember();
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 54; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameDeclarationContext : ParserRuleContext {
		public ObjectidContext[] objectid() {
			return GetRuleContexts<ObjectidContext>();
		}
		public ObjectidContext objectid(int i) {
			return GetRuleContext<ObjectidContext>(i);
		}
		public DeclMemberContext[] declMember() {
			return GetRuleContexts<DeclMemberContext>();
		}
		public DeclMemberContext declMember(int i) {
			return GetRuleContext<DeclMemberContext>(i);
		}
		public GameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterGameDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitGameDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GameDeclarationContext gameDeclaration() {
		GameDeclarationContext _localctx = new GameDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_gameDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(T__3);
			State = 57; objectid();
			State = 58; Match(T__4);
			State = 59; objectid();
			State = 60; Match(T__1);
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==IDENTIFIER) {
				{
				{
				State = 61; declMember();
				}
				}
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 67; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclMemberContext : ParserRuleContext {
		public DeclMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declMember; } }
	 
		public DeclMemberContext() { }
		public virtual void CopyFrom(DeclMemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnDefinitionContext : DeclMemberContext {
		public FunctionDefnContext functionDefn() {
			return GetRuleContext<FunctionDefnContext>(0);
		}
		public FnDefinitionContext(DeclMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterFnDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitFnDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAssignContext : DeclMemberContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public MemberAssignContext(DeclMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterMemberAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitMemberAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberDefinitionContext : DeclMemberContext {
		public MemberDefnContext memberDefn() {
			return GetRuleContext<MemberDefnContext>(0);
		}
		public MemberDefinitionContext(DeclMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterMemberDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitMemberDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclMemberContext declMember() {
		DeclMemberContext _localctx = new DeclMemberContext(Context, State);
		EnterRule(_localctx, 10, RULE_declMember);
		try {
			State = 72;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new MemberAssignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 69; assignment();
				}
				break;
			case 2:
				_localctx = new FnDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; functionDefn();
				}
				break;
			case 3:
				_localctx = new MemberDefinitionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 71; memberDefn();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefnContext : ParserRuleContext {
		public ObjectidContext objectid() {
			return GetRuleContext<ObjectidContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionDefnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterFunctionDefn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitFunctionDefn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefnContext functionDefn() {
		FunctionDefnContext _localctx = new FunctionDefnContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionDefn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; objectid();
			State = 75; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDefnContext : ParserRuleContext {
		public ObjectidContext[] objectid() {
			return GetRuleContexts<ObjectidContext>();
		}
		public ObjectidContext objectid(int i) {
			return GetRuleContext<ObjectidContext>(i);
		}
		public MemberDefnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDefn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterMemberDefn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitMemberDefn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDefn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDefnContext memberDefn() {
		MemberDefnContext _localctx = new MemberDefnContext(Context, State);
		EnterRule(_localctx, 14, RULE_memberDefn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; objectid();
			State = 78; objectid();
			State = 79; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStatementContext : StatementContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStatementContext : StatementContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssignStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterAssignStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitAssignStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnCallStatementContext : StatementContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FnCallStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterFnCallStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitFnCallStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnCallStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_statement);
		try {
			State = 93;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new BlockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 81; block();
				}
				break;
			case 2:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 82; Match(T__6);
				State = 83; Match(T__7);
				State = 84; expr(0);
				State = 85; Match(T__8);
				State = 86; statement();
				State = 89;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 87; Match(T__9);
					State = 88; statement();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new AssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 91; assignment();
				}
				break;
			case 4:
				_localctx = new FnCallStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 92; functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(T__1);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__6) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 96; statement();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 102; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ObjectidContext objectid() {
			return GetRuleContext<ObjectidContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; objectid();
			State = 105; Match(T__10);
			State = 106; expr(0);
			State = 107; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ObjectidContext objectid() {
			return GetRuleContext<ObjectidContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; objectid();
			State = 110; Match(T__7);
			State = 112;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__7) | (1L << T__12) | (1L << T__13) | (1L << T__20) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << IDENTIFIER) | (1L << STRING) | (1L << INTEGER))) != 0)) {
				{
				State = 111; argumentList();
				}
			}

			State = 114; Match(T__8);
			State = 115; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 24, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; expr(0);
			State = 122;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__11) {
				{
				{
				State = 118; Match(T__11);
				State = 119; expr(0);
				}
				}
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OpBitwiseOrContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpBitwiseOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterOpBitwiseOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitOpBitwiseOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpBitwiseOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpEqualityContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpEqualityContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterOpEquality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitOpEquality(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExprContext : ExprContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstantExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstantExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryMinusContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterUnaryMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitUnaryMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectIdExprContext : ExprContext {
		public ObjectidContext objectid() {
			return GetRuleContext<ObjectidContext>(0);
		}
		public ObjectIdExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterObjectIdExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitObjectIdExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectIdExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpAddSubContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpAddSubContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterOpAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitOpAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryNotContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryNotContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterUnaryNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitUnaryNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpBitwiseXorContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpBitwiseXorContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterOpBitwiseXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitOpBitwiseXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpBitwiseXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpMultDivModContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpMultDivModContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterOpMultDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitOpMultDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpMultDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpLogicalAndContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpLogicalAndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterOpLogicalAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitOpLogicalAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLogicalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpComparisonContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpComparisonContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterOpComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitOpComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpBitwiseAndContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpBitwiseAndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterOpBitwiseAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitOpBitwiseAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpBitwiseAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ListExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterListExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitListExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParenExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterParenExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitParenExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpBitShiftContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpBitShiftContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterOpBitShift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitOpBitShift(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpBitShift(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OpLogicalOrContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OpLogicalOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterOpLogicalOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitOpLogicalOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpLogicalOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FnCallExprContext : ExprContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FnCallExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterFnCallExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitFnCallExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnCallExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new FnCallExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 126; functionCall();
				}
				break;
			case 2:
				{
				_localctx = new UnaryMinusContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 127; Match(T__12);
				State = 128; expr(16);
				}
				break;
			case 3:
				{
				_localctx = new UnaryNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 129; Match(T__13);
				State = 130; expr(15);
				}
				break;
			case 4:
				{
				_localctx = new ObjectIdExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 131; objectid();
				}
				break;
			case 5:
				{
				_localctx = new ConstantExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 132; constant();
				}
				break;
			case 6:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 133; Match(T__7);
				State = 134; expr(0);
				State = 135; Match(T__8);
				}
				break;
			case 7:
				{
				_localctx = new ListExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 137; Match(T__1);
				State = 146;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__7) | (1L << T__12) | (1L << T__13) | (1L << T__20) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << IDENTIFIER) | (1L << STRING) | (1L << INTEGER))) != 0)) {
					{
					State = 138; expr(0);
					State = 143;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==T__11) {
						{
						{
						State = 139; Match(T__11);
						State = 140; expr(0);
						}
						}
						State = 145;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
				}

				State = 148; Match(T__2);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 183;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 181;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						_localctx = new OpMultDivModContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 151;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 152;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 153; expr(15);
						}
						break;
					case 2:
						{
						_localctx = new OpAddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 154;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 155;
						_la = TokenStream.La(1);
						if ( !(_la==T__12 || _la==T__17) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 156; expr(14);
						}
						break;
					case 3:
						{
						_localctx = new OpBitShiftContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 157;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 158;
						_la = TokenStream.La(1);
						if ( !(_la==T__18 || _la==T__19) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 159; expr(13);
						}
						break;
					case 4:
						{
						_localctx = new OpComparisonContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 160;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 161;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 162; expr(12);
						}
						break;
					case 5:
						{
						_localctx = new OpEqualityContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 163;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 164;
						_la = TokenStream.La(1);
						if ( !(_la==T__24 || _la==T__25) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 165; expr(11);
						}
						break;
					case 6:
						{
						_localctx = new OpBitwiseAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 166;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 167; Match(T__26);
						State = 168; expr(10);
						}
						break;
					case 7:
						{
						_localctx = new OpBitwiseXorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 169;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 170; Match(T__27);
						State = 171; expr(9);
						}
						break;
					case 8:
						{
						_localctx = new OpBitwiseOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 172;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 173; Match(T__28);
						State = 174; expr(8);
						}
						break;
					case 9:
						{
						_localctx = new OpLogicalAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 175;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 176; Match(T__29);
						State = 177; expr(7);
						}
						break;
					case 10:
						{
						_localctx = new OpLogicalOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 178;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 179; Match(T__30);
						State = 180; expr(6);
						}
						break;
					}
					} 
				}
				State = 185;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ObjectidContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(ChessVCParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ChessVCParser.IDENTIFIER, i);
		}
		public ObjectidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterObjectid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitObjectid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectidContext objectid() {
		ObjectidContext _localctx = new ObjectidContext(Context, State);
		EnterRule(_localctx, 28, RULE_objectid);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(IDENTIFIER);
			State = 191;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 187; Match(T__31);
					State = 188; Match(IDENTIFIER);
					}
					} 
				}
				State = 193;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
	 
		public ConstantContext() { }
		public virtual void CopyFrom(ConstantContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstBoolTrueContext : ConstantContext {
		public ConstBoolTrueContext(ConstantContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstBoolTrue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstBoolTrue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstBoolTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstBoolFalseContext : ConstantContext {
		public ConstBoolFalseContext(ConstantContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstBoolFalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstBoolFalse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstBoolFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstNullContext : ConstantContext {
		public ConstNullContext(ConstantContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstNull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstDirContext : ConstantContext {
		public ITerminalNode[] INTEGER() { return GetTokens(ChessVCParser.INTEGER); }
		public ITerminalNode INTEGER(int i) {
			return GetToken(ChessVCParser.INTEGER, i);
		}
		public ConstDirContext(ConstantContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstDir(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstDir(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDir(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstStrContext : ConstantContext {
		public ITerminalNode STRING() { return GetToken(ChessVCParser.STRING, 0); }
		public ConstStrContext(ConstantContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstStr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstStr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstRangeContext : ConstantContext {
		public ITerminalNode[] INTEGER() { return GetTokens(ChessVCParser.INTEGER); }
		public ITerminalNode INTEGER(int i) {
			return GetToken(ChessVCParser.INTEGER, i);
		}
		public ConstRangeContext(ConstantContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstIntContext : ConstantContext {
		public ITerminalNode INTEGER() { return GetToken(ChessVCParser.INTEGER, 0); }
		public ConstIntContext(ConstantContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 30, RULE_constant);
		int _la;
		try {
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new ConstIntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 194; Match(INTEGER);
				}
				break;
			case 2:
				_localctx = new ConstStrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 195; Match(STRING);
				}
				break;
			case 3:
				_localctx = new ConstRangeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 196; Match(INTEGER);
				State = 197; Match(T__32);
				State = 198; Match(INTEGER);
				}
				break;
			case 4:
				_localctx = new ConstDirContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 199; Match(T__20);
				State = 201;
				_la = TokenStream.La(1);
				if (_la==T__12) {
					{
					State = 200; Match(T__12);
					}
				}

				State = 203; Match(INTEGER);
				State = 204; Match(T__11);
				State = 206;
				_la = TokenStream.La(1);
				if (_la==T__12) {
					{
					State = 205; Match(T__12);
					}
				}

				State = 208; Match(INTEGER);
				State = 209; Match(T__22);
				}
				break;
			case 5:
				_localctx = new ConstBoolTrueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 210; Match(T__33);
				}
				break;
			case 6:
				_localctx = new ConstBoolFalseContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 211; Match(T__34);
				}
				break;
			case 7:
				_localctx = new ConstNullContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 212; Match(T__35);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3,\xDA");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4");
		sb.Append("\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x3\x2\x3\x2\x3");
		sb.Append("\x2\x3\x3\a\x3\'\n\x3\f\x3\xE\x3*\v\x3\x3\x4\x3\x4\x5\x4.\n");
		sb.Append("\x4\x3\x5\x3\x5\x3\x5\x3\x5\a\x5\x34\n\x5\f\x5\xE\x5\x37\v\x5");
		sb.Append("\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x41\n");
		sb.Append("\x6\f\x6\xE\x6\x44\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x5\aK\n\a");
		sb.Append("\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n");
		sb.Append("\x3\n\x3\n\x3\n\x5\n\\\n\n\x3\n\x3\n\x5\n`\n\n\x3\v\x3\v\a\v");
		sb.Append("\x64\n\v\f\v\xE\vg\v\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3");
		sb.Append("\r\x3\r\x3\r\x5\rs\n\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE");
		sb.Append("{\n\xE\f\xE\xE\xE~\v\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF");
		sb.Append("\a\xF\x90\n\xF\f\xF\xE\xF\x93\v\xF\x5\xF\x95\n\xF\x3\xF\x5\xF");
		sb.Append("\x98\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3");
		sb.Append("\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3");
		sb.Append("\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3");
		sb.Append("\xF\x3\xF\a\xF\xB8\n\xF\f\xF\xE\xF\xBB\v\xF\x3\x10\x3\x10\x3");
		sb.Append("\x10\a\x10\xC0\n\x10\f\x10\xE\x10\xC3\v\x10\x3\x11\x3\x11\x3");
		sb.Append("\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xCC\n\x11\x3\x11\x3");
		sb.Append("\x11\x3\x11\x5\x11\xD1\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3");
		sb.Append("\x11\x5\x11\xD8\n\x11\x3\x11\x2\x3\x1C\x12\x2\x4\x6\b\n\f\xE");
		sb.Append("\x10\x12\x14\x16\x18\x1A\x1C\x1E \x2\a\x3\x2\x11\x13\x4\x2\xF");
		sb.Append("\xF\x14\x14\x3\x2\x15\x16\x3\x2\x17\x1A\x3\x2\x1B\x1C\xF1\x2");
		sb.Append("\"\x3\x2\x2\x2\x4(\x3\x2\x2\x2\x6-\x3\x2\x2\x2\b/\x3\x2\x2\x2");
		sb.Append("\n:\x3\x2\x2\x2\fJ\x3\x2\x2\x2\xEL\x3\x2\x2\x2\x10O\x3\x2\x2");
		sb.Append("\x2\x12_\x3\x2\x2\x2\x14\x61\x3\x2\x2\x2\x16j\x3\x2\x2\x2\x18");
		sb.Append("o\x3\x2\x2\x2\x1Aw\x3\x2\x2\x2\x1C\x97\x3\x2\x2\x2\x1E\xBC\x3");
		sb.Append("\x2\x2\x2 \xD7\x3\x2\x2\x2\"#\x5\x4\x3\x2#$\a\x2\x2\x3$\x3\x3");
		sb.Append("\x2\x2\x2%\'\x5\x6\x4\x2&%\x3\x2\x2\x2\'*\x3\x2\x2\x2(&\x3\x2");
		sb.Append("\x2\x2()\x3\x2\x2\x2)\x5\x3\x2\x2\x2*(\x3\x2\x2\x2+.\x5\b\x5");
		sb.Append("\x2,.\x5\n\x6\x2-+\x3\x2\x2\x2-,\x3\x2\x2\x2.\a\x3\x2\x2\x2");
		sb.Append("/\x30\a\x3\x2\x2\x30\x31\x5\x1E\x10\x2\x31\x35\a\x4\x2\x2\x32");
		sb.Append("\x34\x5\f\a\x2\x33\x32\x3\x2\x2\x2\x34\x37\x3\x2\x2\x2\x35\x33");
		sb.Append("\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x38\x3\x2\x2\x2\x37\x35");
		sb.Append("\x3\x2\x2\x2\x38\x39\a\x5\x2\x2\x39\t\x3\x2\x2\x2:;\a\x6\x2");
		sb.Append("\x2;<\x5\x1E\x10\x2<=\a\a\x2\x2=>\x5\x1E\x10\x2>\x42\a\x4\x2");
		sb.Append("\x2?\x41\x5\f\a\x2@?\x3\x2\x2\x2\x41\x44\x3\x2\x2\x2\x42@\x3");
		sb.Append("\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43\x45\x3\x2\x2\x2\x44\x42\x3");
		sb.Append("\x2\x2\x2\x45\x46\a\x5\x2\x2\x46\v\x3\x2\x2\x2GK\x5\x16\f\x2");
		sb.Append("HK\x5\xE\b\x2IK\x5\x10\t\x2JG\x3\x2\x2\x2JH\x3\x2\x2\x2JI\x3");
		sb.Append("\x2\x2\x2K\r\x3\x2\x2\x2LM\x5\x1E\x10\x2MN\x5\x14\v\x2N\xF\x3");
		sb.Append("\x2\x2\x2OP\x5\x1E\x10\x2PQ\x5\x1E\x10\x2QR\a\b\x2\x2R\x11\x3");
		sb.Append("\x2\x2\x2S`\x5\x14\v\x2TU\a\t\x2\x2UV\a\n\x2\x2VW\x5\x1C\xF");
		sb.Append("\x2WX\a\v\x2\x2X[\x5\x12\n\x2YZ\a\f\x2\x2Z\\\x5\x12\n\x2[Y\x3");
		sb.Append("\x2\x2\x2[\\\x3\x2\x2\x2\\`\x3\x2\x2\x2]`\x5\x16\f\x2^`\x5\x18");
		sb.Append("\r\x2_S\x3\x2\x2\x2_T\x3\x2\x2\x2_]\x3\x2\x2\x2_^\x3\x2\x2\x2");
		sb.Append("`\x13\x3\x2\x2\x2\x61\x65\a\x4\x2\x2\x62\x64\x5\x12\n\x2\x63");
		sb.Append("\x62\x3\x2\x2\x2\x64g\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x66");
		sb.Append("\x3\x2\x2\x2\x66h\x3\x2\x2\x2g\x65\x3\x2\x2\x2hi\a\x5\x2\x2");
		sb.Append("i\x15\x3\x2\x2\x2jk\x5\x1E\x10\x2kl\a\r\x2\x2lm\x5\x1C\xF\x2");
		sb.Append("mn\a\b\x2\x2n\x17\x3\x2\x2\x2op\x5\x1E\x10\x2pr\a\n\x2\x2qs");
		sb.Append("\x5\x1A\xE\x2rq\x3\x2\x2\x2rs\x3\x2\x2\x2st\x3\x2\x2\x2tu\a");
		sb.Append("\v\x2\x2uv\a\b\x2\x2v\x19\x3\x2\x2\x2w|\x5\x1C\xF\x2xy\a\xE");
		sb.Append("\x2\x2y{\x5\x1C\xF\x2zx\x3\x2\x2\x2{~\x3\x2\x2\x2|z\x3\x2\x2");
		sb.Append("\x2|}\x3\x2\x2\x2}\x1B\x3\x2\x2\x2~|\x3\x2\x2\x2\x7F\x80\b\xF");
		sb.Append("\x1\x2\x80\x98\x5\x18\r\x2\x81\x82\a\xF\x2\x2\x82\x98\x5\x1C");
		sb.Append("\xF\x12\x83\x84\a\x10\x2\x2\x84\x98\x5\x1C\xF\x11\x85\x98\x5");
		sb.Append("\x1E\x10\x2\x86\x98\x5 \x11\x2\x87\x88\a\n\x2\x2\x88\x89\x5");
		sb.Append("\x1C\xF\x2\x89\x8A\a\v\x2\x2\x8A\x98\x3\x2\x2\x2\x8B\x94\a\x4");
		sb.Append("\x2\x2\x8C\x91\x5\x1C\xF\x2\x8D\x8E\a\xE\x2\x2\x8E\x90\x5\x1C");
		sb.Append("\xF\x2\x8F\x8D\x3\x2\x2\x2\x90\x93\x3\x2\x2\x2\x91\x8F\x3\x2");
		sb.Append("\x2\x2\x91\x92\x3\x2\x2\x2\x92\x95\x3\x2\x2\x2\x93\x91\x3\x2");
		sb.Append("\x2\x2\x94\x8C\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x96\x3\x2");
		sb.Append("\x2\x2\x96\x98\a\x5\x2\x2\x97\x7F\x3\x2\x2\x2\x97\x81\x3\x2");
		sb.Append("\x2\x2\x97\x83\x3\x2\x2\x2\x97\x85\x3\x2\x2\x2\x97\x86\x3\x2");
		sb.Append("\x2\x2\x97\x87\x3\x2\x2\x2\x97\x8B\x3\x2\x2\x2\x98\xB9\x3\x2");
		sb.Append("\x2\x2\x99\x9A\f\x10\x2\x2\x9A\x9B\t\x2\x2\x2\x9B\xB8\x5\x1C");
		sb.Append("\xF\x11\x9C\x9D\f\xF\x2\x2\x9D\x9E\t\x3\x2\x2\x9E\xB8\x5\x1C");
		sb.Append("\xF\x10\x9F\xA0\f\xE\x2\x2\xA0\xA1\t\x4\x2\x2\xA1\xB8\x5\x1C");
		sb.Append("\xF\xF\xA2\xA3\f\r\x2\x2\xA3\xA4\t\x5\x2\x2\xA4\xB8\x5\x1C\xF");
		sb.Append("\xE\xA5\xA6\f\f\x2\x2\xA6\xA7\t\x6\x2\x2\xA7\xB8\x5\x1C\xF\r");
		sb.Append("\xA8\xA9\f\v\x2\x2\xA9\xAA\a\x1D\x2\x2\xAA\xB8\x5\x1C\xF\f\xAB");
		sb.Append("\xAC\f\n\x2\x2\xAC\xAD\a\x1E\x2\x2\xAD\xB8\x5\x1C\xF\v\xAE\xAF");
		sb.Append("\f\t\x2\x2\xAF\xB0\a\x1F\x2\x2\xB0\xB8\x5\x1C\xF\n\xB1\xB2\f");
		sb.Append("\b\x2\x2\xB2\xB3\a \x2\x2\xB3\xB8\x5\x1C\xF\t\xB4\xB5\f\a\x2");
		sb.Append("\x2\xB5\xB6\a!\x2\x2\xB6\xB8\x5\x1C\xF\b\xB7\x99\x3\x2\x2\x2");
		sb.Append("\xB7\x9C\x3\x2\x2\x2\xB7\x9F\x3\x2\x2\x2\xB7\xA2\x3\x2\x2\x2");
		sb.Append("\xB7\xA5\x3\x2\x2\x2\xB7\xA8\x3\x2\x2\x2\xB7\xAB\x3\x2\x2\x2");
		sb.Append("\xB7\xAE\x3\x2\x2\x2\xB7\xB1\x3\x2\x2\x2\xB7\xB4\x3\x2\x2\x2");
		sb.Append("\xB8\xBB\x3\x2\x2\x2\xB9\xB7\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2");
		sb.Append("\xBA\x1D\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBC\xC1\a\'\x2\x2\xBD");
		sb.Append("\xBE\a\"\x2\x2\xBE\xC0\a\'\x2\x2\xBF\xBD\x3\x2\x2\x2\xC0\xC3");
		sb.Append("\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\x1F");
		sb.Append("\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC4\xD8\a)\x2\x2\xC5\xD8\a");
		sb.Append("(\x2\x2\xC6\xC7\a)\x2\x2\xC7\xC8\a#\x2\x2\xC8\xD8\a)\x2\x2\xC9");
		sb.Append("\xCB\a\x17\x2\x2\xCA\xCC\a\xF\x2\x2\xCB\xCA\x3\x2\x2\x2\xCB");
		sb.Append("\xCC\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xCE\a)\x2\x2\xCE\xD0");
		sb.Append("\a\xE\x2\x2\xCF\xD1\a\xF\x2\x2\xD0\xCF\x3\x2\x2\x2\xD0\xD1\x3");
		sb.Append("\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD3\a)\x2\x2\xD3\xD8\a\x19");
		sb.Append("\x2\x2\xD4\xD8\a$\x2\x2\xD5\xD8\a%\x2\x2\xD6\xD8\a&\x2\x2\xD7");
		sb.Append("\xC4\x3\x2\x2\x2\xD7\xC5\x3\x2\x2\x2\xD7\xC6\x3\x2\x2\x2\xD7");
		sb.Append("\xC9\x3\x2\x2\x2\xD7\xD4\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2\xD7");
		sb.Append("\xD6\x3\x2\x2\x2\xD8!\x3\x2\x2\x2\x15(-\x35\x42J[_\x65r|\x91");
		sb.Append("\x94\x97\xB7\xB9\xC1\xCB\xD0\xD7");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
