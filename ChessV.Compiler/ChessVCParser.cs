//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ChessVC.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ChessVCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, LINE_COMMENT=50, COMMENT=51, WHITESPACE=52, 
		ATTRIBUTE=53, IDENTIFIER=54, CHAR=55, STRING=56, INTEGER=57;
	public const int
		RULE_unit = 0, RULE_declaration = 1, RULE_pieceTypeDeclaration = 2, RULE_gameDeclaration = 3, 
		RULE_declMember = 4, RULE_constructorAssign = 5, RULE_functionDefn = 6, 
		RULE_memberDefn = 7, RULE_lambdaprimary = 8, RULE_lambdaexpr = 9, RULE_simpleEmbeddedStatement = 10, 
		RULE_embeddedStatement = 11, RULE_statement = 12, RULE_statementList = 13, 
		RULE_block = 14, RULE_ifBody = 15, RULE_variableDeclaration = 16, RULE_primaryExpr = 17, 
		RULE_postfixExpr = 18, RULE_unaryExpr = 19, RULE_multiplicativeExpr = 20, 
		RULE_additiveExpr = 21, RULE_relationalExpr = 22, RULE_equalityExpr = 23, 
		RULE_conditionalAndExpr = 24, RULE_conditionalOrExpr = 25, RULE_conditionalExpr = 26, 
		RULE_assignmentExpr = 27, RULE_expression = 28, RULE_argumentList = 29, 
		RULE_argument = 30, RULE_predefinedType = 31, RULE_identifier = 32, RULE_literal = 33;
	public static readonly string[] ruleNames = {
		"unit", "declaration", "pieceTypeDeclaration", "gameDeclaration", "declMember", 
		"constructorAssign", "functionDefn", "memberDefn", "lambdaprimary", "lambdaexpr", 
		"simpleEmbeddedStatement", "embeddedStatement", "statement", "statementList", 
		"block", "ifBody", "variableDeclaration", "primaryExpr", "postfixExpr", 
		"unaryExpr", "multiplicativeExpr", "additiveExpr", "relationalExpr", "equalityExpr", 
		"conditionalAndExpr", "conditionalOrExpr", "conditionalExpr", "assignmentExpr", 
		"expression", "argumentList", "argument", "predefinedType", "identifier", 
		"literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'PieceType'", "'{'", "'}'", "'Game'", "':'", "'='", "';'", "'true'", 
		"'false'", "'('", "')'", "'.'", "'+'", "'-'", "'<'", "'>'", "'<='", "'>='", 
		"'=='", "'!='", "'&&'", "'||'", "'if'", "'else'", "'return'", "'var'", 
		"'local'", "'['", "']'", "'++'", "'--'", "'!'", "'*'", "'/'", "'%'", "'?'", 
		"'+='", "'-='", "','", "'Int'", "'IntRange'", "'String'", "'Bool'", "'Choice'", 
		"'..'", "'MirrorSymmetry'", "'RotationalSymmetry'", "'NoSymmetry'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "LINE_COMMENT", "COMMENT", "WHITESPACE", "ATTRIBUTE", "IDENTIFIER", 
		"CHAR", "STRING", "INTEGER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ChessVC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ChessVCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ChessVCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ChessVCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class UnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitUnit(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0 || _la==T__3) {
				{
				{
				State = 68;
				declaration();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GameDeclarationContext gameDeclaration() {
			return GetRuleContext<GameDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PieceTypeDeclarationContext pieceTypeDeclaration() {
			return GetRuleContext<PieceTypeDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaration);
		try {
			State = 76;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74;
				gameDeclaration();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75;
				pieceTypeDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PieceTypeDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclMemberContext[] declMember() {
			return GetRuleContexts<DeclMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclMemberContext declMember(int i) {
			return GetRuleContext<DeclMemberContext>(i);
		}
		public PieceTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pieceTypeDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterPieceTypeDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitPieceTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public PieceTypeDeclarationContext pieceTypeDeclaration() {
		PieceTypeDeclarationContext _localctx = new PieceTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_pieceTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			Match(T__0);
			State = 79;
			identifier();
			State = 80;
			Match(T__1);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18048483369943040L) != 0)) {
				{
				{
				State = 81;
				declMember();
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 87;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclMemberContext[] declMember() {
			return GetRuleContexts<DeclMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclMemberContext declMember(int i) {
			return GetRuleContext<DeclMemberContext>(i);
		}
		public GameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterGameDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitGameDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GameDeclarationContext gameDeclaration() {
		GameDeclarationContext _localctx = new GameDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_gameDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(T__3);
			State = 90;
			identifier();
			State = 91;
			Match(T__4);
			State = 92;
			identifier();
			State = 93;
			Match(T__1);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18048483369943040L) != 0)) {
				{
				{
				State = 94;
				declMember();
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 100;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorAssignContext constructorAssign() {
			return GetRuleContext<ConstructorAssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDefnContext functionDefn() {
			return GetRuleContext<FunctionDefnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberDefnContext memberDefn() {
			return GetRuleContext<MemberDefnContext>(0);
		}
		public DeclMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterDeclMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitDeclMember(this);
		}
	}

	[RuleVersion(0)]
	public DeclMemberContext declMember() {
		DeclMemberContext _localctx = new DeclMemberContext(Context, State);
		EnterRule(_localctx, 8, RULE_declMember);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102;
				constructorAssign();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103;
				functionDefn();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 104;
				memberDefn();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorAssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ConstructorAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorAssign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstructorAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstructorAssign(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorAssignContext constructorAssign() {
		ConstructorAssignContext _localctx = new ConstructorAssignContext(Context, State);
		EnterRule(_localctx, 10, RULE_constructorAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			identifier();
			State = 108;
			Match(T__5);
			State = 109;
			literal();
			State = 110;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionDefnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterFunctionDefn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitFunctionDefn(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefnContext functionDefn() {
		FunctionDefnContext _localctx = new FunctionDefnContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionDefn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			identifier();
			State = 113;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDefnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberDefnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDefn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterMemberDefn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitMemberDefn(this);
		}
	}

	[RuleVersion(0)]
	public MemberDefnContext memberDefn() {
		MemberDefnContext _localctx = new MemberDefnContext(Context, State);
		EnterRule(_localctx, 14, RULE_memberDefn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			predefinedType();
			State = 116;
			identifier();
			State = 117;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaprimaryContext : ParserRuleContext {
		public LambdaprimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaprimary; } }
	 
		public LambdaprimaryContext() { }
		public virtual void CopyFrom(LambdaprimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LambdaConstBoolContext : LambdaprimaryContext {
		public IToken c;
		public LambdaConstBoolContext(LambdaprimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaConstBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaConstBool(this);
		}
	}
	public partial class LambdaConstIntContext : LambdaprimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ChessVCParser.INTEGER, 0); }
		public LambdaConstIntContext(LambdaprimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaConstInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaConstInt(this);
		}
	}
	public partial class LambdaIDContext : LambdaprimaryContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LambdaIDContext(LambdaprimaryContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaID(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaID(this);
		}
	}

	[RuleVersion(0)]
	public LambdaprimaryContext lambdaprimary() {
		LambdaprimaryContext _localctx = new LambdaprimaryContext(Context, State);
		EnterRule(_localctx, 16, RULE_lambdaprimary);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				_localctx = new LambdaIDContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 119;
				identifier();
				}
				break;
			case T__7:
				_localctx = new LambdaConstBoolContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 120;
				((LambdaConstBoolContext)_localctx).c = Match(T__7);
				}
				break;
			case T__8:
				_localctx = new LambdaConstBoolContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 121;
				((LambdaConstBoolContext)_localctx).c = Match(T__8);
				}
				break;
			case INTEGER:
				_localctx = new LambdaConstIntContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 122;
				Match(INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaexprContext : ParserRuleContext {
		public LambdaexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaexpr; } }
	 
		public LambdaexprContext() { }
		public virtual void CopyFrom(LambdaexprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LambdaPriContext : LambdaexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaprimaryContext lambdaprimary() {
			return GetRuleContext<LambdaprimaryContext>(0);
		}
		public LambdaPriContext(LambdaexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaPri(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaPri(this);
		}
	}
	public partial class LambdaEqualtiyContext : LambdaexprContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public LambdaexprContext[] lambdaexpr() {
			return GetRuleContexts<LambdaexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaexprContext lambdaexpr(int i) {
			return GetRuleContext<LambdaexprContext>(i);
		}
		public LambdaEqualtiyContext(LambdaexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaEqualtiy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaEqualtiy(this);
		}
	}
	public partial class LambdaAndContext : LambdaexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaexprContext[] lambdaexpr() {
			return GetRuleContexts<LambdaexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaexprContext lambdaexpr(int i) {
			return GetRuleContext<LambdaexprContext>(i);
		}
		public LambdaAndContext(LambdaexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaAnd(this);
		}
	}
	public partial class LambdaParenContext : LambdaexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaexprContext lambdaexpr() {
			return GetRuleContext<LambdaexprContext>(0);
		}
		public LambdaParenContext(LambdaexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaParen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaParen(this);
		}
	}
	public partial class LambdaDotContext : LambdaexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public LambdaDotContext(LambdaexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaDot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaDot(this);
		}
	}
	public partial class LambdaOrContext : LambdaexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LambdaexprContext[] lambdaexpr() {
			return GetRuleContexts<LambdaexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaexprContext lambdaexpr(int i) {
			return GetRuleContext<LambdaexprContext>(i);
		}
		public LambdaOrContext(LambdaexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaOr(this);
		}
	}
	public partial class LambdaAddContext : LambdaexprContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public LambdaexprContext[] lambdaexpr() {
			return GetRuleContexts<LambdaexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaexprContext lambdaexpr(int i) {
			return GetRuleContext<LambdaexprContext>(i);
		}
		public LambdaAddContext(LambdaexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaAdd(this);
		}
	}
	public partial class LambdaCompareContext : LambdaexprContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public LambdaexprContext[] lambdaexpr() {
			return GetRuleContexts<LambdaexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaexprContext lambdaexpr(int i) {
			return GetRuleContext<LambdaexprContext>(i);
		}
		public LambdaCompareContext(LambdaexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaCompare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaCompare(this);
		}
	}

	[RuleVersion(0)]
	public LambdaexprContext lambdaexpr() {
		return lambdaexpr(0);
	}

	private LambdaexprContext lambdaexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LambdaexprContext _localctx = new LambdaexprContext(Context, _parentState);
		LambdaexprContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_lambdaexpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new LambdaPriContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 126;
				lambdaprimary();
				}
				break;
			case 2:
				{
				_localctx = new LambdaParenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 127;
				Match(T__9);
				State = 128;
				lambdaexpr(0);
				State = 129;
				Match(T__10);
				}
				break;
			case 3:
				{
				_localctx = new LambdaDotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 131;
				identifier();
				State = 132;
				Match(T__11);
				State = 133;
				identifier();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 154;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 152;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new LambdaAddContext(new LambdaexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lambdaexpr);
						State = 137;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 138;
						((LambdaAddContext)_localctx).bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__12 || _la==T__13) ) {
							((LambdaAddContext)_localctx).bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 139;
						lambdaexpr(6);
						}
						break;
					case 2:
						{
						_localctx = new LambdaCompareContext(new LambdaexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lambdaexpr);
						State = 140;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 141;
						((LambdaCompareContext)_localctx).bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 491520L) != 0)) ) {
							((LambdaCompareContext)_localctx).bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 142;
						lambdaexpr(5);
						}
						break;
					case 3:
						{
						_localctx = new LambdaEqualtiyContext(new LambdaexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lambdaexpr);
						State = 143;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 144;
						((LambdaEqualtiyContext)_localctx).bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__18 || _la==T__19) ) {
							((LambdaEqualtiyContext)_localctx).bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 145;
						lambdaexpr(4);
						}
						break;
					case 4:
						{
						_localctx = new LambdaAndContext(new LambdaexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lambdaexpr);
						State = 146;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 147;
						Match(T__20);
						State = 148;
						lambdaexpr(3);
						}
						break;
					case 5:
						{
						_localctx = new LambdaOrContext(new LambdaexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lambdaexpr);
						State = 149;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 150;
						Match(T__21);
						State = 151;
						lambdaexpr(2);
						}
						break;
					}
					} 
				}
				State = 156;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleEmbeddedStatementContext : ParserRuleContext {
		public SimpleEmbeddedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleEmbeddedStatement; } }
	 
		public SimpleEmbeddedStatementContext() { }
		public virtual void CopyFrom(SimpleEmbeddedStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TheEmptyStatementContext : SimpleEmbeddedStatementContext {
		public TheEmptyStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterTheEmptyStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitTheEmptyStatement(this);
		}
	}
	public partial class ExpressionStatementContext : SimpleEmbeddedStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}
	public partial class IfStatementContext : SimpleEmbeddedStatementContext {
		public IToken el;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBodyContext[] ifBody() {
			return GetRuleContexts<IfBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBodyContext ifBody(int i) {
			return GetRuleContext<IfBodyContext>(i);
		}
		public IfStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}
	public partial class ReturnStatementContext : SimpleEmbeddedStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public SimpleEmbeddedStatementContext simpleEmbeddedStatement() {
		SimpleEmbeddedStatementContext _localctx = new SimpleEmbeddedStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_simpleEmbeddedStatement);
		try {
			State = 174;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				_localctx = new TheEmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 157;
				Match(T__6);
				}
				break;
			case T__1:
			case T__7:
			case T__8:
			case T__9:
			case T__12:
			case T__13:
			case T__14:
			case T__31:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case IDENTIFIER:
			case CHAR:
			case STRING:
			case INTEGER:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 158;
				expression(0);
				State = 159;
				Match(T__6);
				}
				break;
			case T__22:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 161;
				Match(T__22);
				State = 162;
				Match(T__9);
				State = 163;
				expression(0);
				State = 164;
				Match(T__10);
				State = 165;
				ifBody();
				State = 168;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 166;
					((IfStatementContext)_localctx).el = Match(T__23);
					State = 167;
					ifBody();
					}
					break;
				}
				}
				break;
			case T__24:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 170;
				Match(T__24);
				State = 171;
				expression(0);
				State = 172;
				Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmbeddedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleEmbeddedStatementContext simpleEmbeddedStatement() {
			return GetRuleContext<SimpleEmbeddedStatementContext>(0);
		}
		public EmbeddedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embeddedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterEmbeddedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitEmbeddedStatement(this);
		}
	}

	[RuleVersion(0)]
	public EmbeddedStatementContext embeddedStatement() {
		EmbeddedStatementContext _localctx = new EmbeddedStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_embeddedStatement);
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				simpleEmbeddedStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement);
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
			case T__26:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180;
				variableDeclaration();
				State = 181;
				Match(T__6);
				}
				break;
			case T__1:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__12:
			case T__13:
			case T__14:
			case T__22:
			case T__24:
			case T__31:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case IDENTIFIER:
			case CHAR:
			case STRING:
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183;
				embeddedStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 26, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 186;
				statement();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 271305598203651972L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(T__1);
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 271305598203651972L) != 0)) {
				{
				State = 192;
				statementList();
				}
			}

			State = 195;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleEmbeddedStatementContext simpleEmbeddedStatement() {
			return GetRuleContext<SimpleEmbeddedStatementContext>(0);
		}
		public IfBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterIfBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitIfBody(this);
		}
	}

	[RuleVersion(0)]
	public IfBodyContext ifBody() {
		IfBodyContext _localctx = new IfBodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifBody);
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197;
				block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 198;
				simpleEmbeddedStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public IToken t;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_variableDeclaration);
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201;
				_localctx.t = Match(T__25);
				State = 202;
				identifier();
				State = 203;
				Match(T__5);
				State = 204;
				expression(0);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206;
				_localctx.t = Match(T__26);
				State = 207;
				identifier();
				State = 208;
				Match(T__5);
				State = 209;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
	 
		public PrimaryExprContext() { }
		public virtual void CopyFrom(PrimaryExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralExpContext : PrimaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLiteralExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLiteralExp(this);
		}
	}
	public partial class ParenthesisExpContext : PrimaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisExpContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterParenthesisExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitParenthesisExp(this);
		}
	}
	public partial class SimpleNameExpContext : PrimaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SimpleNameExpContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterSimpleNameExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitSimpleNameExp(this);
		}
	}
	public partial class PredefTypeExpContext : PrimaryExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public PredefTypeExpContext(PrimaryExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterPredefTypeExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitPredefTypeExp(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, State);
		EnterRule(_localctx, 34, RULE_primaryExpr);
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__7:
			case T__8:
			case T__14:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case CHAR:
			case STRING:
			case INTEGER:
				_localctx = new LiteralExpContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 213;
				literal();
				}
				break;
			case IDENTIFIER:
				_localctx = new SimpleNameExpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 214;
				identifier();
				}
				break;
			case T__9:
				_localctx = new ParenthesisExpContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 215;
				Match(T__9);
				State = 216;
				expression(0);
				State = 217;
				Match(T__10);
				}
				break;
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
				_localctx = new PredefTypeExpContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 219;
				predefinedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExprContext : ParserRuleContext {
		public PostfixExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpr; } }
	 
		public PostfixExprContext() { }
		public virtual void CopyFrom(PostfixExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnCallExpContext : PostfixExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExprContext postfixExpr() {
			return GetRuleContext<PostfixExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FnCallExpContext(PostfixExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterFnCallExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitFnCallExp(this);
		}
	}
	public partial class MemberAccExpContext : PostfixExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExprContext postfixExpr() {
			return GetRuleContext<PostfixExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberAccExpContext(PostfixExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterMemberAccExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitMemberAccExp(this);
		}
	}
	public partial class PostfixExprPassthroughContext : PostfixExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		public PostfixExprPassthroughContext(PostfixExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterPostfixExprPassthrough(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitPostfixExprPassthrough(this);
		}
	}
	public partial class PostfixOpExpContext : PostfixExprContext {
		public IToken uop;
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExprContext postfixExpr() {
			return GetRuleContext<PostfixExprContext>(0);
		}
		public PostfixOpExpContext(PostfixExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterPostfixOpExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitPostfixOpExp(this);
		}
	}
	public partial class IndexExpContext : PostfixExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExprContext postfixExpr() {
			return GetRuleContext<PostfixExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndexExpContext(PostfixExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterIndexExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitIndexExp(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExprContext postfixExpr() {
		return postfixExpr(0);
	}

	private PostfixExprContext postfixExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixExprContext _localctx = new PostfixExprContext(Context, _parentState);
		PostfixExprContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_postfixExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PostfixExprPassthroughContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 223;
			primaryExpr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 241;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						{
						_localctx = new IndexExpContext(new PostfixExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpr);
						State = 225;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 226;
						Match(T__27);
						State = 227;
						expression(0);
						State = 228;
						Match(T__28);
						}
						break;
					case 2:
						{
						_localctx = new FnCallExpContext(new PostfixExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpr);
						State = 230;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 231;
						Match(T__9);
						State = 233;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 271305597960382212L) != 0)) {
							{
							State = 232;
							argumentList();
							}
						}

						State = 235;
						Match(T__10);
						}
						break;
					case 3:
						{
						_localctx = new MemberAccExpContext(new PostfixExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpr);
						State = 236;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 237;
						Match(T__11);
						State = 238;
						identifier();
						}
						break;
					case 4:
						{
						_localctx = new PostfixOpExpContext(new PostfixExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpr);
						State = 239;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 240;
						((PostfixOpExpContext)_localctx).uop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__29 || _la==T__30) ) {
							((PostfixOpExpContext)_localctx).uop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		public IToken uop;
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExprContext postfixExpr() {
			return GetRuleContext<PostfixExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(Context, State);
		EnterRule(_localctx, 38, RULE_unaryExpr);
		int _la;
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
			case T__7:
			case T__8:
			case T__9:
			case T__14:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case IDENTIFIER:
			case CHAR:
			case STRING:
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246;
				postfixExpr(0);
				}
				break;
			case T__12:
			case T__13:
			case T__31:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				_localctx.uop = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4294991872L) != 0)) ) {
					_localctx.uop = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 248;
				unaryExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExprContext : ParserRuleContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExprContext multiplicativeExpr() {
			return GetRuleContext<MultiplicativeExprContext>(0);
		}
		public MultiplicativeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpr(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExprContext multiplicativeExpr() {
		return multiplicativeExpr(0);
	}

	private MultiplicativeExprContext multiplicativeExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExprContext _localctx = new MultiplicativeExprContext(Context, _parentState);
		MultiplicativeExprContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_multiplicativeExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 252;
			unaryExpr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 259;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultiplicativeExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpr);
					State = 254;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 255;
					_localctx.bop = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 60129542144L) != 0)) ) {
						_localctx.bop = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 256;
					unaryExpr();
					}
					} 
				}
				State = 261;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExprContext : ParserRuleContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicativeExprContext multiplicativeExpr() {
			return GetRuleContext<MultiplicativeExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExprContext additiveExpr() {
			return GetRuleContext<AdditiveExprContext>(0);
		}
		public AdditiveExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterAdditiveExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitAdditiveExpr(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExprContext additiveExpr() {
		return additiveExpr(0);
	}

	private AdditiveExprContext additiveExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExprContext _localctx = new AdditiveExprContext(Context, _parentState);
		AdditiveExprContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_additiveExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 263;
			multiplicativeExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 270;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AdditiveExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_additiveExpr);
					State = 265;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 266;
					_localctx.bop = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==T__12 || _la==T__13) ) {
						_localctx.bop = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 267;
					multiplicativeExpr(0);
					}
					} 
				}
				State = 272;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExprContext : ParserRuleContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public AdditiveExprContext additiveExpr() {
			return GetRuleContext<AdditiveExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExprContext relationalExpr() {
			return GetRuleContext<RelationalExprContext>(0);
		}
		public RelationalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterRelationalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitRelationalExpr(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExprContext relationalExpr() {
		return relationalExpr(0);
	}

	private RelationalExprContext relationalExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExprContext _localctx = new RelationalExprContext(Context, _parentState);
		RelationalExprContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_relationalExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 274;
			additiveExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 281;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RelationalExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_relationalExpr);
					State = 276;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 277;
					_localctx.bop = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 491520L) != 0)) ) {
						_localctx.bop = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 278;
					additiveExpr(0);
					}
					} 
				}
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExprContext : ParserRuleContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public RelationalExprContext relationalExpr() {
			return GetRuleContext<RelationalExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExprContext equalityExpr() {
			return GetRuleContext<EqualityExprContext>(0);
		}
		public EqualityExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterEqualityExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitEqualityExpr(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExprContext equalityExpr() {
		return equalityExpr(0);
	}

	private EqualityExprContext equalityExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExprContext _localctx = new EqualityExprContext(Context, _parentState);
		EqualityExprContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_equalityExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 285;
			relationalExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 292;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EqualityExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_equalityExpr);
					State = 287;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 288;
					_localctx.bop = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==T__18 || _la==T__19) ) {
						_localctx.bop = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 289;
					relationalExpr(0);
					}
					} 
				}
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalAndExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EqualityExprContext equalityExpr() {
			return GetRuleContext<EqualityExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndExprContext conditionalAndExpr() {
			return GetRuleContext<ConditionalAndExprContext>(0);
		}
		public ConditionalAndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpr(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExprContext conditionalAndExpr() {
		return conditionalAndExpr(0);
	}

	private ConditionalAndExprContext conditionalAndExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionalAndExprContext _localctx = new ConditionalAndExprContext(Context, _parentState);
		ConditionalAndExprContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_conditionalAndExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 296;
			equalityExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 303;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalAndExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpr);
					State = 298;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 299;
					Match(T__20);
					State = 300;
					equalityExpr(0);
					}
					} 
				}
				State = 305;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalOrExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalAndExprContext conditionalAndExpr() {
			return GetRuleContext<ConditionalAndExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOrExprContext conditionalOrExpr() {
			return GetRuleContext<ConditionalOrExprContext>(0);
		}
		public ConditionalOrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpr(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExprContext conditionalOrExpr() {
		return conditionalOrExpr(0);
	}

	private ConditionalOrExprContext conditionalOrExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionalOrExprContext _localctx = new ConditionalOrExprContext(Context, _parentState);
		ConditionalOrExprContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_conditionalOrExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 307;
			conditionalAndExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 314;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalOrExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpr);
					State = 309;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 310;
					Match(T__21);
					State = 311;
					conditionalAndExpr(0);
					}
					} 
				}
				State = 316;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalOrExprContext conditionalOrExpr() {
			return GetRuleContext<ConditionalOrExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConditionalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConditionalExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConditionalExpr(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExprContext conditionalExpr() {
		ConditionalExprContext _localctx = new ConditionalExprContext(Context, State);
		EnterRule(_localctx, 52, RULE_conditionalExpr);
		try {
			State = 324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 317;
				conditionalOrExpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 318;
				conditionalOrExpr(0);
				State = 319;
				Match(T__35);
				State = 320;
				expression(0);
				State = 321;
				Match(T__4);
				State = 322;
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExprContext : ParserRuleContext {
		public IToken bop;
		[System.Diagnostics.DebuggerNonUserCode] public ConditionalExprContext conditionalExpr() {
			return GetRuleContext<ConditionalExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExprContext assignmentExpr() {
			return GetRuleContext<AssignmentExprContext>(0);
		}
		public AssignmentExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterAssignmentExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitAssignmentExpr(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExprContext assignmentExpr() {
		AssignmentExprContext _localctx = new AssignmentExprContext(Context, State);
		EnterRule(_localctx, 54, RULE_assignmentExpr);
		int _la;
		try {
			State = 331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 326;
				conditionalExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 327;
				conditionalExpr();
				State = 328;
				_localctx.bop = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 412316860480L) != 0)) ) {
					_localctx.bop = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 329;
				assignmentExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprPassthroughContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentExprContext assignmentExpr() {
			return GetRuleContext<AssignmentExprContext>(0);
		}
		public ExprPassthroughContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterExprPassthrough(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitExprPassthrough(this);
		}
	}
	public partial class ExprApplyAttributeContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE() { return GetToken(ChessVCParser.ATTRIBUTE, 0); }
		public ExprApplyAttributeContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterExprApplyAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitExprApplyAttribute(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExprPassthroughContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 334;
			assignmentExpr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 340;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprApplyAttributeContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 336;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 337;
					Match(ATTRIBUTE);
					}
					} 
				}
				State = 342;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 58, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343;
			argument();
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__38) {
				{
				{
				State = 344;
				Match(T__38);
				State = 345;
				argument();
				}
				}
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 60, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredefinedTypeContext : ParserRuleContext {
		public PredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefinedType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterPredefinedType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitPredefinedType(this);
		}
	}

	[RuleVersion(0)]
	public PredefinedTypeContext predefinedType() {
		PredefinedTypeContext _localctx = new PredefinedTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_predefinedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 34084860461056L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ChessVCParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstBoolTrueContext : LiteralContext {
		public ConstBoolTrueContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstBoolTrue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstBoolTrue(this);
		}
	}
	public partial class ConstCharContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR() { return GetToken(ChessVCParser.CHAR, 0); }
		public ConstCharContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstChar(this);
		}
	}
	public partial class ConstBoolFalseContext : LiteralContext {
		public ConstBoolFalseContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstBoolFalse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstBoolFalse(this);
		}
	}
	public partial class ConstLambdaContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LambdaexprContext lambdaexpr() {
			return GetRuleContext<LambdaexprContext>(0);
		}
		public ConstLambdaContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstLambda(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstLambda(this);
		}
	}
	public partial class ConstNullContext : LiteralContext {
		public ConstNullContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstNull(this);
		}
	}
	public partial class ConstSymmetryContext : LiteralContext {
		public ConstSymmetryContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstSymmetry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstSymmetry(this);
		}
	}
	public partial class ConstStrgContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ChessVCParser.STRING, 0); }
		public ConstStrgContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstStrg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstStrg(this);
		}
	}
	public partial class ConstDirContext : LiteralContext {
		public IToken m1;
		public IToken m2;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(ChessVCParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(ChessVCParser.INTEGER, i);
		}
		public ConstDirContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstDir(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstDir(this);
		}
	}
	public partial class ConstRangeContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTEGER() { return GetTokens(ChessVCParser.INTEGER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER(int i) {
			return GetToken(ChessVCParser.INTEGER, i);
		}
		public ConstRangeContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstRange(this);
		}
	}
	public partial class ConstListContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConstListContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstList(this);
		}
	}
	public partial class ConstIntContext : LiteralContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(ChessVCParser.INTEGER, 0); }
		public ConstIntContext(LiteralContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstInt(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 66, RULE_literal);
		int _la;
		try {
			State = 398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new ConstBoolTrueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 357;
				Match(T__7);
				}
				break;
			case 2:
				_localctx = new ConstBoolFalseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 358;
				Match(T__8);
				}
				break;
			case 3:
				_localctx = new ConstIntContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 359;
				Match(INTEGER);
				}
				break;
			case 4:
				_localctx = new ConstStrgContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 360;
				Match(STRING);
				}
				break;
			case 5:
				_localctx = new ConstCharContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 361;
				Match(CHAR);
				}
				break;
			case 6:
				_localctx = new ConstRangeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 362;
				Match(INTEGER);
				State = 363;
				Match(T__44);
				State = 364;
				Match(INTEGER);
				}
				break;
			case 7:
				_localctx = new ConstDirContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 365;
				Match(T__14);
				State = 367;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__13) {
					{
					State = 366;
					((ConstDirContext)_localctx).m1 = Match(T__13);
					}
				}

				State = 369;
				Match(INTEGER);
				State = 370;
				Match(T__38);
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__13) {
					{
					State = 371;
					((ConstDirContext)_localctx).m2 = Match(T__13);
					}
				}

				State = 374;
				Match(INTEGER);
				State = 375;
				Match(T__15);
				}
				break;
			case 8:
				_localctx = new ConstListContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 376;
				Match(T__1);
				State = 385;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 271305597960382212L) != 0)) {
					{
					State = 377;
					expression(0);
					State = 382;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__38) {
						{
						{
						State = 378;
						Match(T__38);
						State = 379;
						expression(0);
						}
						}
						State = 384;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 387;
				Match(T__2);
				}
				break;
			case 9:
				_localctx = new ConstLambdaContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 388;
				Match(T__1);
				State = 389;
				identifier();
				State = 390;
				Match(T__4);
				State = 391;
				lambdaexpr(0);
				State = 392;
				Match(T__2);
				}
				break;
			case 10:
				_localctx = new ConstSymmetryContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 394;
				Match(T__45);
				}
				break;
			case 11:
				_localctx = new ConstSymmetryContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 395;
				Match(T__46);
				}
				break;
			case 12:
				_localctx = new ConstSymmetryContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 396;
				Match(T__47);
				}
				break;
			case 13:
				_localctx = new ConstNullContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 397;
				Match(T__48);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return lambdaexpr_sempred((LambdaexprContext)_localctx, predIndex);
		case 18: return postfixExpr_sempred((PostfixExprContext)_localctx, predIndex);
		case 20: return multiplicativeExpr_sempred((MultiplicativeExprContext)_localctx, predIndex);
		case 21: return additiveExpr_sempred((AdditiveExprContext)_localctx, predIndex);
		case 22: return relationalExpr_sempred((RelationalExprContext)_localctx, predIndex);
		case 23: return equalityExpr_sempred((EqualityExprContext)_localctx, predIndex);
		case 24: return conditionalAndExpr_sempred((ConditionalAndExprContext)_localctx, predIndex);
		case 25: return conditionalOrExpr_sempred((ConditionalOrExprContext)_localctx, predIndex);
		case 28: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool lambdaexpr_sempred(LambdaexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfixExpr_sempred(PostfixExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multiplicativeExpr_sempred(MultiplicativeExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpr_sempred(AdditiveExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpr_sempred(RelationalExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpr_sempred(EqualityExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool conditionalAndExpr_sempred(ConditionalAndExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 1);
		}
		return true;
	}
	private bool conditionalOrExpr_sempred(ConditionalOrExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,57,401,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,5,0,70,8,0,10,0,
		12,0,73,9,0,1,1,1,1,3,1,77,8,1,1,2,1,2,1,2,1,2,5,2,83,8,2,10,2,12,2,86,
		9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,5,3,96,8,3,10,3,12,3,99,9,3,1,3,1,
		3,1,4,1,4,1,4,3,4,106,8,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,
		1,7,1,8,1,8,1,8,1,8,3,8,124,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,3,9,136,8,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,9,5,9,153,8,9,10,9,12,9,156,9,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,3,10,169,8,10,1,10,1,10,1,10,1,10,3,10,175,8,10,1,11,
		1,11,3,11,179,8,11,1,12,1,12,1,12,1,12,3,12,185,8,12,1,13,4,13,188,8,13,
		11,13,12,13,189,1,14,1,14,3,14,194,8,14,1,14,1,14,1,15,1,15,3,15,200,8,
		15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,212,8,16,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,3,17,221,8,17,1,18,1,18,1,18,1,18,1,18,1,
		18,1,18,1,18,1,18,1,18,1,18,3,18,234,8,18,1,18,1,18,1,18,1,18,1,18,1,18,
		5,18,242,8,18,10,18,12,18,245,9,18,1,19,1,19,1,19,3,19,250,8,19,1,20,1,
		20,1,20,1,20,1,20,1,20,5,20,258,8,20,10,20,12,20,261,9,20,1,21,1,21,1,
		21,1,21,1,21,1,21,5,21,269,8,21,10,21,12,21,272,9,21,1,22,1,22,1,22,1,
		22,1,22,1,22,5,22,280,8,22,10,22,12,22,283,9,22,1,23,1,23,1,23,1,23,1,
		23,1,23,5,23,291,8,23,10,23,12,23,294,9,23,1,24,1,24,1,24,1,24,1,24,1,
		24,5,24,302,8,24,10,24,12,24,305,9,24,1,25,1,25,1,25,1,25,1,25,1,25,5,
		25,313,8,25,10,25,12,25,316,9,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,
		26,325,8,26,1,27,1,27,1,27,1,27,1,27,3,27,332,8,27,1,28,1,28,1,28,1,28,
		1,28,5,28,339,8,28,10,28,12,28,342,9,28,1,29,1,29,1,29,5,29,347,8,29,10,
		29,12,29,350,9,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,1,33,1,33,1,33,3,33,368,8,33,1,33,1,33,1,33,3,33,373,8,33,
		1,33,1,33,1,33,1,33,1,33,1,33,5,33,381,8,33,10,33,12,33,384,9,33,3,33,
		386,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,399,
		8,33,1,33,0,9,18,36,40,42,44,46,48,50,56,34,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,0,
		8,1,0,13,14,1,0,15,18,1,0,19,20,1,0,30,31,2,0,13,14,32,32,1,0,33,35,2,
		0,6,6,37,38,1,0,40,44,427,0,71,1,0,0,0,2,76,1,0,0,0,4,78,1,0,0,0,6,89,
		1,0,0,0,8,105,1,0,0,0,10,107,1,0,0,0,12,112,1,0,0,0,14,115,1,0,0,0,16,
		123,1,0,0,0,18,135,1,0,0,0,20,174,1,0,0,0,22,178,1,0,0,0,24,184,1,0,0,
		0,26,187,1,0,0,0,28,191,1,0,0,0,30,199,1,0,0,0,32,211,1,0,0,0,34,220,1,
		0,0,0,36,222,1,0,0,0,38,249,1,0,0,0,40,251,1,0,0,0,42,262,1,0,0,0,44,273,
		1,0,0,0,46,284,1,0,0,0,48,295,1,0,0,0,50,306,1,0,0,0,52,324,1,0,0,0,54,
		331,1,0,0,0,56,333,1,0,0,0,58,343,1,0,0,0,60,351,1,0,0,0,62,353,1,0,0,
		0,64,355,1,0,0,0,66,398,1,0,0,0,68,70,3,2,1,0,69,68,1,0,0,0,70,73,1,0,
		0,0,71,69,1,0,0,0,71,72,1,0,0,0,72,1,1,0,0,0,73,71,1,0,0,0,74,77,3,6,3,
		0,75,77,3,4,2,0,76,74,1,0,0,0,76,75,1,0,0,0,77,3,1,0,0,0,78,79,5,1,0,0,
		79,80,3,64,32,0,80,84,5,2,0,0,81,83,3,8,4,0,82,81,1,0,0,0,83,86,1,0,0,
		0,84,82,1,0,0,0,84,85,1,0,0,0,85,87,1,0,0,0,86,84,1,0,0,0,87,88,5,3,0,
		0,88,5,1,0,0,0,89,90,5,4,0,0,90,91,3,64,32,0,91,92,5,5,0,0,92,93,3,64,
		32,0,93,97,5,2,0,0,94,96,3,8,4,0,95,94,1,0,0,0,96,99,1,0,0,0,97,95,1,0,
		0,0,97,98,1,0,0,0,98,100,1,0,0,0,99,97,1,0,0,0,100,101,5,3,0,0,101,7,1,
		0,0,0,102,106,3,10,5,0,103,106,3,12,6,0,104,106,3,14,7,0,105,102,1,0,0,
		0,105,103,1,0,0,0,105,104,1,0,0,0,106,9,1,0,0,0,107,108,3,64,32,0,108,
		109,5,6,0,0,109,110,3,66,33,0,110,111,5,7,0,0,111,11,1,0,0,0,112,113,3,
		64,32,0,113,114,3,28,14,0,114,13,1,0,0,0,115,116,3,62,31,0,116,117,3,64,
		32,0,117,118,5,7,0,0,118,15,1,0,0,0,119,124,3,64,32,0,120,124,5,8,0,0,
		121,124,5,9,0,0,122,124,5,57,0,0,123,119,1,0,0,0,123,120,1,0,0,0,123,121,
		1,0,0,0,123,122,1,0,0,0,124,17,1,0,0,0,125,126,6,9,-1,0,126,136,3,16,8,
		0,127,128,5,10,0,0,128,129,3,18,9,0,129,130,5,11,0,0,130,136,1,0,0,0,131,
		132,3,64,32,0,132,133,5,12,0,0,133,134,3,64,32,0,134,136,1,0,0,0,135,125,
		1,0,0,0,135,127,1,0,0,0,135,131,1,0,0,0,136,154,1,0,0,0,137,138,10,5,0,
		0,138,139,7,0,0,0,139,153,3,18,9,6,140,141,10,4,0,0,141,142,7,1,0,0,142,
		153,3,18,9,5,143,144,10,3,0,0,144,145,7,2,0,0,145,153,3,18,9,4,146,147,
		10,2,0,0,147,148,5,21,0,0,148,153,3,18,9,3,149,150,10,1,0,0,150,151,5,
		22,0,0,151,153,3,18,9,2,152,137,1,0,0,0,152,140,1,0,0,0,152,143,1,0,0,
		0,152,146,1,0,0,0,152,149,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,
		155,1,0,0,0,155,19,1,0,0,0,156,154,1,0,0,0,157,175,5,7,0,0,158,159,3,56,
		28,0,159,160,5,7,0,0,160,175,1,0,0,0,161,162,5,23,0,0,162,163,5,10,0,0,
		163,164,3,56,28,0,164,165,5,11,0,0,165,168,3,30,15,0,166,167,5,24,0,0,
		167,169,3,30,15,0,168,166,1,0,0,0,168,169,1,0,0,0,169,175,1,0,0,0,170,
		171,5,25,0,0,171,172,3,56,28,0,172,173,5,7,0,0,173,175,1,0,0,0,174,157,
		1,0,0,0,174,158,1,0,0,0,174,161,1,0,0,0,174,170,1,0,0,0,175,21,1,0,0,0,
		176,179,3,28,14,0,177,179,3,20,10,0,178,176,1,0,0,0,178,177,1,0,0,0,179,
		23,1,0,0,0,180,181,3,32,16,0,181,182,5,7,0,0,182,185,1,0,0,0,183,185,3,
		22,11,0,184,180,1,0,0,0,184,183,1,0,0,0,185,25,1,0,0,0,186,188,3,24,12,
		0,187,186,1,0,0,0,188,189,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,
		27,1,0,0,0,191,193,5,2,0,0,192,194,3,26,13,0,193,192,1,0,0,0,193,194,1,
		0,0,0,194,195,1,0,0,0,195,196,5,3,0,0,196,29,1,0,0,0,197,200,3,28,14,0,
		198,200,3,20,10,0,199,197,1,0,0,0,199,198,1,0,0,0,200,31,1,0,0,0,201,202,
		5,26,0,0,202,203,3,64,32,0,203,204,5,6,0,0,204,205,3,56,28,0,205,212,1,
		0,0,0,206,207,5,27,0,0,207,208,3,64,32,0,208,209,5,6,0,0,209,210,3,56,
		28,0,210,212,1,0,0,0,211,201,1,0,0,0,211,206,1,0,0,0,212,33,1,0,0,0,213,
		221,3,66,33,0,214,221,3,64,32,0,215,216,5,10,0,0,216,217,3,56,28,0,217,
		218,5,11,0,0,218,221,1,0,0,0,219,221,3,62,31,0,220,213,1,0,0,0,220,214,
		1,0,0,0,220,215,1,0,0,0,220,219,1,0,0,0,221,35,1,0,0,0,222,223,6,18,-1,
		0,223,224,3,34,17,0,224,243,1,0,0,0,225,226,10,5,0,0,226,227,5,28,0,0,
		227,228,3,56,28,0,228,229,5,29,0,0,229,242,1,0,0,0,230,231,10,4,0,0,231,
		233,5,10,0,0,232,234,3,58,29,0,233,232,1,0,0,0,233,234,1,0,0,0,234,235,
		1,0,0,0,235,242,5,11,0,0,236,237,10,3,0,0,237,238,5,12,0,0,238,242,3,64,
		32,0,239,240,10,2,0,0,240,242,7,3,0,0,241,225,1,0,0,0,241,230,1,0,0,0,
		241,236,1,0,0,0,241,239,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,
		1,0,0,0,244,37,1,0,0,0,245,243,1,0,0,0,246,250,3,36,18,0,247,248,7,4,0,
		0,248,250,3,38,19,0,249,246,1,0,0,0,249,247,1,0,0,0,250,39,1,0,0,0,251,
		252,6,20,-1,0,252,253,3,38,19,0,253,259,1,0,0,0,254,255,10,1,0,0,255,256,
		7,5,0,0,256,258,3,38,19,0,257,254,1,0,0,0,258,261,1,0,0,0,259,257,1,0,
		0,0,259,260,1,0,0,0,260,41,1,0,0,0,261,259,1,0,0,0,262,263,6,21,-1,0,263,
		264,3,40,20,0,264,270,1,0,0,0,265,266,10,1,0,0,266,267,7,0,0,0,267,269,
		3,40,20,0,268,265,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,
		0,0,271,43,1,0,0,0,272,270,1,0,0,0,273,274,6,22,-1,0,274,275,3,42,21,0,
		275,281,1,0,0,0,276,277,10,1,0,0,277,278,7,1,0,0,278,280,3,42,21,0,279,
		276,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,45,1,0,
		0,0,283,281,1,0,0,0,284,285,6,23,-1,0,285,286,3,44,22,0,286,292,1,0,0,
		0,287,288,10,1,0,0,288,289,7,2,0,0,289,291,3,44,22,0,290,287,1,0,0,0,291,
		294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,47,1,0,0,0,294,292,1,0,
		0,0,295,296,6,24,-1,0,296,297,3,46,23,0,297,303,1,0,0,0,298,299,10,1,0,
		0,299,300,5,21,0,0,300,302,3,46,23,0,301,298,1,0,0,0,302,305,1,0,0,0,303,
		301,1,0,0,0,303,304,1,0,0,0,304,49,1,0,0,0,305,303,1,0,0,0,306,307,6,25,
		-1,0,307,308,3,48,24,0,308,314,1,0,0,0,309,310,10,1,0,0,310,311,5,22,0,
		0,311,313,3,48,24,0,312,309,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,
		315,1,0,0,0,315,51,1,0,0,0,316,314,1,0,0,0,317,325,3,50,25,0,318,319,3,
		50,25,0,319,320,5,36,0,0,320,321,3,56,28,0,321,322,5,5,0,0,322,323,3,56,
		28,0,323,325,1,0,0,0,324,317,1,0,0,0,324,318,1,0,0,0,325,53,1,0,0,0,326,
		332,3,52,26,0,327,328,3,52,26,0,328,329,7,6,0,0,329,330,3,54,27,0,330,
		332,1,0,0,0,331,326,1,0,0,0,331,327,1,0,0,0,332,55,1,0,0,0,333,334,6,28,
		-1,0,334,335,3,54,27,0,335,340,1,0,0,0,336,337,10,1,0,0,337,339,5,53,0,
		0,338,336,1,0,0,0,339,342,1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,
		57,1,0,0,0,342,340,1,0,0,0,343,348,3,60,30,0,344,345,5,39,0,0,345,347,
		3,60,30,0,346,344,1,0,0,0,347,350,1,0,0,0,348,346,1,0,0,0,348,349,1,0,
		0,0,349,59,1,0,0,0,350,348,1,0,0,0,351,352,3,56,28,0,352,61,1,0,0,0,353,
		354,7,7,0,0,354,63,1,0,0,0,355,356,5,54,0,0,356,65,1,0,0,0,357,399,5,8,
		0,0,358,399,5,9,0,0,359,399,5,57,0,0,360,399,5,56,0,0,361,399,5,55,0,0,
		362,363,5,57,0,0,363,364,5,45,0,0,364,399,5,57,0,0,365,367,5,15,0,0,366,
		368,5,14,0,0,367,366,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,370,5,
		57,0,0,370,372,5,39,0,0,371,373,5,14,0,0,372,371,1,0,0,0,372,373,1,0,0,
		0,373,374,1,0,0,0,374,375,5,57,0,0,375,399,5,16,0,0,376,385,5,2,0,0,377,
		382,3,56,28,0,378,379,5,39,0,0,379,381,3,56,28,0,380,378,1,0,0,0,381,384,
		1,0,0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,
		0,385,377,1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,387,399,5,3,0,0,388,
		389,5,2,0,0,389,390,3,64,32,0,390,391,5,5,0,0,391,392,3,18,9,0,392,393,
		5,3,0,0,393,399,1,0,0,0,394,399,5,46,0,0,395,399,5,47,0,0,396,399,5,48,
		0,0,397,399,5,49,0,0,398,357,1,0,0,0,398,358,1,0,0,0,398,359,1,0,0,0,398,
		360,1,0,0,0,398,361,1,0,0,0,398,362,1,0,0,0,398,365,1,0,0,0,398,376,1,
		0,0,0,398,388,1,0,0,0,398,394,1,0,0,0,398,395,1,0,0,0,398,396,1,0,0,0,
		398,397,1,0,0,0,399,67,1,0,0,0,37,71,76,84,97,105,123,135,152,154,168,
		174,178,184,189,193,199,211,220,233,241,243,249,259,270,281,292,303,314,
		324,331,340,348,367,372,382,385,398
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
