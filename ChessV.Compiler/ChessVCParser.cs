//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\greg\workspace\ChessVCParser\ChessVC.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class ChessVCParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, LINE_COMMENT=50, COMMENT=51, WHITESPACE=52, 
		ATTRIBUTE=53, IDENTIFIER=54, CHAR=55, STRING=56, INTEGER=57;
	public const int
		RULE_unit = 0, RULE_declaration = 1, RULE_pieceTypeDeclaration = 2, RULE_gameDeclaration = 3, 
		RULE_declMember = 4, RULE_constructorAssign = 5, RULE_functionDefn = 6, 
		RULE_memberDefn = 7, RULE_lambdaprimary = 8, RULE_lambdaexpr = 9, RULE_simpleEmbeddedStatement = 10, 
		RULE_embeddedStatement = 11, RULE_statement = 12, RULE_statementList = 13, 
		RULE_block = 14, RULE_ifBody = 15, RULE_variableDeclaration = 16, RULE_primaryExpr = 17, 
		RULE_postfixExpr = 18, RULE_unaryExpr = 19, RULE_multiplicativeExpr = 20, 
		RULE_additiveExpr = 21, RULE_relationalExpr = 22, RULE_equalityExpr = 23, 
		RULE_conditionalAndExpr = 24, RULE_conditionalOrExpr = 25, RULE_conditionalExpr = 26, 
		RULE_assignmentExpr = 27, RULE_expression = 28, RULE_argumentList = 29, 
		RULE_argument = 30, RULE_predefinedType = 31, RULE_identifier = 32, RULE_literal = 33;
	public static readonly string[] ruleNames = {
		"unit", "declaration", "pieceTypeDeclaration", "gameDeclaration", "declMember", 
		"constructorAssign", "functionDefn", "memberDefn", "lambdaprimary", "lambdaexpr", 
		"simpleEmbeddedStatement", "embeddedStatement", "statement", "statementList", 
		"block", "ifBody", "variableDeclaration", "primaryExpr", "postfixExpr", 
		"unaryExpr", "multiplicativeExpr", "additiveExpr", "relationalExpr", "equalityExpr", 
		"conditionalAndExpr", "conditionalOrExpr", "conditionalExpr", "assignmentExpr", 
		"expression", "argumentList", "argument", "predefinedType", "identifier", 
		"literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'PieceType'", "'{'", "'}'", "'Game'", "':'", "'='", "';'", "'true'", 
		"'false'", "'('", "')'", "'.'", "'+'", "'-'", "'<'", "'>'", "'<='", "'>='", 
		"'=='", "'!='", "'&&'", "'||'", "'if'", "'else'", "'return'", "'var'", 
		"'local'", "'['", "']'", "'++'", "'--'", "'!'", "'*'", "'/'", "'%'", "'?'", 
		"'+='", "'-='", "','", "'Int'", "'IntRange'", "'String'", "'Bool'", "'Choice'", 
		"'..'", "'MirrorSymmetry'", "'RotationalSymmetry'", "'NoSymmetry'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "LINE_COMMENT", "COMMENT", "WHITESPACE", "ATTRIBUTE", "IDENTIFIER", 
		"CHAR", "STRING", "INTEGER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ChessVC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ChessVCParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class UnitContext : ParserRuleContext {
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__0 || _la==T__3) {
				{
				{
				State = 68; declaration();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public GameDeclarationContext gameDeclaration() {
			return GetRuleContext<GameDeclarationContext>(0);
		}
		public PieceTypeDeclarationContext pieceTypeDeclaration() {
			return GetRuleContext<PieceTypeDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaration);
		try {
			State = 76;
			switch (TokenStream.La(1)) {
			case T__3:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74; gameDeclaration();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75; pieceTypeDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PieceTypeDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DeclMemberContext[] declMember() {
			return GetRuleContexts<DeclMemberContext>();
		}
		public DeclMemberContext declMember(int i) {
			return GetRuleContext<DeclMemberContext>(i);
		}
		public PieceTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pieceTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterPieceTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitPieceTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPieceTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PieceTypeDeclarationContext pieceTypeDeclaration() {
		PieceTypeDeclarationContext _localctx = new PieceTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_pieceTypeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(T__0);
			State = 79; identifier();
			State = 80; Match(T__1);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 81; declMember();
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 87; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GameDeclarationContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public DeclMemberContext[] declMember() {
			return GetRuleContexts<DeclMemberContext>();
		}
		public DeclMemberContext declMember(int i) {
			return GetRuleContext<DeclMemberContext>(i);
		}
		public GameDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gameDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterGameDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitGameDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGameDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GameDeclarationContext gameDeclaration() {
		GameDeclarationContext _localctx = new GameDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_gameDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(T__3);
			State = 90; identifier();
			State = 91; Match(T__4);
			State = 92; identifier();
			State = 93; Match(T__1);
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 94; declMember();
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 100; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclMemberContext : ParserRuleContext {
		public ConstructorAssignContext constructorAssign() {
			return GetRuleContext<ConstructorAssignContext>(0);
		}
		public FunctionDefnContext functionDefn() {
			return GetRuleContext<FunctionDefnContext>(0);
		}
		public MemberDefnContext memberDefn() {
			return GetRuleContext<MemberDefnContext>(0);
		}
		public DeclMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterDeclMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitDeclMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclMemberContext declMember() {
		DeclMemberContext _localctx = new DeclMemberContext(Context, State);
		EnterRule(_localctx, 8, RULE_declMember);
		try {
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 102; constructorAssign();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103; functionDefn();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 104; memberDefn();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorAssignContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ConstructorAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorAssign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstructorAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstructorAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorAssignContext constructorAssign() {
		ConstructorAssignContext _localctx = new ConstructorAssignContext(Context, State);
		EnterRule(_localctx, 10, RULE_constructorAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; identifier();
			State = 108; Match(T__5);
			State = 109; literal();
			State = 110; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefnContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionDefnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterFunctionDefn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitFunctionDefn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDefn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefnContext functionDefn() {
		FunctionDefnContext _localctx = new FunctionDefnContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionDefn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; identifier();
			State = 113; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDefnContext : ParserRuleContext {
		public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberDefnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDefn; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterMemberDefn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitMemberDefn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDefn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDefnContext memberDefn() {
		MemberDefnContext _localctx = new MemberDefnContext(Context, State);
		EnterRule(_localctx, 14, RULE_memberDefn);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; predefinedType();
			State = 116; identifier();
			State = 117; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaprimaryContext : ParserRuleContext {
		public LambdaprimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaprimary; } }
	 
		public LambdaprimaryContext() { }
		public virtual void CopyFrom(LambdaprimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LambdaConstBoolContext : LambdaprimaryContext {
		public IToken c;
		public LambdaConstBoolContext(LambdaprimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaConstBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaConstBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaConstBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaConstIntContext : LambdaprimaryContext {
		public ITerminalNode INTEGER() { return GetToken(ChessVCParser.INTEGER, 0); }
		public LambdaConstIntContext(LambdaprimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaConstInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaConstInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaConstInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaIDContext : LambdaprimaryContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LambdaIDContext(LambdaprimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaID(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaID(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaID(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaprimaryContext lambdaprimary() {
		LambdaprimaryContext _localctx = new LambdaprimaryContext(Context, State);
		EnterRule(_localctx, 16, RULE_lambdaprimary);
		try {
			State = 123;
			switch (TokenStream.La(1)) {
			case IDENTIFIER:
				_localctx = new LambdaIDContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 119; identifier();
				}
				break;
			case T__7:
				_localctx = new LambdaConstBoolContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 120; ((LambdaConstBoolContext)_localctx).c = Match(T__7);
				}
				break;
			case T__8:
				_localctx = new LambdaConstBoolContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 121; ((LambdaConstBoolContext)_localctx).c = Match(T__8);
				}
				break;
			case INTEGER:
				_localctx = new LambdaConstIntContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 122; Match(INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaexprContext : ParserRuleContext {
		public LambdaexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaexpr; } }
	 
		public LambdaexprContext() { }
		public virtual void CopyFrom(LambdaexprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LambdaPriContext : LambdaexprContext {
		public LambdaprimaryContext lambdaprimary() {
			return GetRuleContext<LambdaprimaryContext>(0);
		}
		public LambdaPriContext(LambdaexprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaPri(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaPri(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaPri(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaEqualtiyContext : LambdaexprContext {
		public IToken bop;
		public LambdaexprContext[] lambdaexpr() {
			return GetRuleContexts<LambdaexprContext>();
		}
		public LambdaexprContext lambdaexpr(int i) {
			return GetRuleContext<LambdaexprContext>(i);
		}
		public LambdaEqualtiyContext(LambdaexprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaEqualtiy(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaEqualtiy(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaEqualtiy(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaAndContext : LambdaexprContext {
		public LambdaexprContext[] lambdaexpr() {
			return GetRuleContexts<LambdaexprContext>();
		}
		public LambdaexprContext lambdaexpr(int i) {
			return GetRuleContext<LambdaexprContext>(i);
		}
		public LambdaAndContext(LambdaexprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaParenContext : LambdaexprContext {
		public LambdaexprContext lambdaexpr() {
			return GetRuleContext<LambdaexprContext>(0);
		}
		public LambdaParenContext(LambdaexprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaParen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaDotContext : LambdaexprContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public LambdaDotContext(LambdaexprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaDot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaDot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaOrContext : LambdaexprContext {
		public LambdaexprContext[] lambdaexpr() {
			return GetRuleContexts<LambdaexprContext>();
		}
		public LambdaexprContext lambdaexpr(int i) {
			return GetRuleContext<LambdaexprContext>(i);
		}
		public LambdaOrContext(LambdaexprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaAddContext : LambdaexprContext {
		public IToken bop;
		public LambdaexprContext[] lambdaexpr() {
			return GetRuleContexts<LambdaexprContext>();
		}
		public LambdaexprContext lambdaexpr(int i) {
			return GetRuleContext<LambdaexprContext>(i);
		}
		public LambdaAddContext(LambdaexprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaCompareContext : LambdaexprContext {
		public IToken bop;
		public LambdaexprContext[] lambdaexpr() {
			return GetRuleContexts<LambdaexprContext>();
		}
		public LambdaexprContext lambdaexpr(int i) {
			return GetRuleContext<LambdaexprContext>(i);
		}
		public LambdaCompareContext(LambdaexprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLambdaCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLambdaCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaCompare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaexprContext lambdaexpr() {
		return lambdaexpr(0);
	}

	private LambdaexprContext lambdaexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LambdaexprContext _localctx = new LambdaexprContext(Context, _parentState);
		LambdaexprContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_lambdaexpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				_localctx = new LambdaPriContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 126; lambdaprimary();
				}
				break;
			case 2:
				{
				_localctx = new LambdaParenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 127; Match(T__9);
				State = 128; lambdaexpr(0);
				State = 129; Match(T__10);
				}
				break;
			case 3:
				{
				_localctx = new LambdaDotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 131; identifier();
				State = 132; Match(T__11);
				State = 133; identifier();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 154;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 152;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new LambdaAddContext(new LambdaexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lambdaexpr);
						State = 137;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 138;
						((LambdaAddContext)_localctx).bop = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==T__12 || _la==T__13) ) {
							((LambdaAddContext)_localctx).bop = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 139; lambdaexpr(6);
						}
						break;
					case 2:
						{
						_localctx = new LambdaCompareContext(new LambdaexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lambdaexpr);
						State = 140;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 141;
						((LambdaCompareContext)_localctx).bop = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) ) {
							((LambdaCompareContext)_localctx).bop = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 142; lambdaexpr(5);
						}
						break;
					case 3:
						{
						_localctx = new LambdaEqualtiyContext(new LambdaexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lambdaexpr);
						State = 143;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 144;
						((LambdaEqualtiyContext)_localctx).bop = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==T__18 || _la==T__19) ) {
							((LambdaEqualtiyContext)_localctx).bop = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 145; lambdaexpr(4);
						}
						break;
					case 4:
						{
						_localctx = new LambdaAndContext(new LambdaexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lambdaexpr);
						State = 146;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 147; Match(T__20);
						State = 148; lambdaexpr(3);
						}
						break;
					case 5:
						{
						_localctx = new LambdaOrContext(new LambdaexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_lambdaexpr);
						State = 149;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 150; Match(T__21);
						State = 151; lambdaexpr(2);
						}
						break;
					}
					} 
				}
				State = 156;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleEmbeddedStatementContext : ParserRuleContext {
		public SimpleEmbeddedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleEmbeddedStatement; } }
	 
		public SimpleEmbeddedStatementContext() { }
		public virtual void CopyFrom(SimpleEmbeddedStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TheEmptyStatementContext : SimpleEmbeddedStatementContext {
		public TheEmptyStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterTheEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitTheEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTheEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionStatementContext : SimpleEmbeddedStatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStatementContext : SimpleEmbeddedStatementContext {
		public IToken el;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IfBodyContext[] ifBody() {
			return GetRuleContexts<IfBodyContext>();
		}
		public IfBodyContext ifBody(int i) {
			return GetRuleContext<IfBodyContext>(i);
		}
		public IfStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReturnStatementContext : SimpleEmbeddedStatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleEmbeddedStatementContext simpleEmbeddedStatement() {
		SimpleEmbeddedStatementContext _localctx = new SimpleEmbeddedStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_simpleEmbeddedStatement);
		try {
			State = 174;
			switch (TokenStream.La(1)) {
			case T__6:
				_localctx = new TheEmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 157; Match(T__6);
				}
				break;
			case T__1:
			case T__7:
			case T__8:
			case T__9:
			case T__12:
			case T__13:
			case T__14:
			case T__31:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case IDENTIFIER:
			case CHAR:
			case STRING:
			case INTEGER:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 158; expression(0);
				State = 159; Match(T__6);
				}
				break;
			case T__22:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 161; Match(T__22);
				State = 162; Match(T__9);
				State = 163; expression(0);
				State = 164; Match(T__10);
				State = 165; ifBody();
				State = 168;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 166; ((IfStatementContext)_localctx).el = Match(T__23);
					State = 167; ifBody();
					}
					break;
				}
				}
				break;
			case T__24:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 170; Match(T__24);
				State = 171; expression(0);
				State = 172; Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmbeddedStatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SimpleEmbeddedStatementContext simpleEmbeddedStatement() {
			return GetRuleContext<SimpleEmbeddedStatementContext>(0);
		}
		public EmbeddedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embeddedStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterEmbeddedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitEmbeddedStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbeddedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmbeddedStatementContext embeddedStatement() {
		EmbeddedStatementContext _localctx = new EmbeddedStatementContext(Context, State);
		EnterRule(_localctx, 22, RULE_embeddedStatement);
		try {
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 176; block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177; simpleEmbeddedStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_statement);
		try {
			State = 184;
			switch (TokenStream.La(1)) {
			case T__25:
			case T__26:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180; variableDeclaration();
				State = 181; Match(T__6);
				}
				break;
			case T__1:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__12:
			case T__13:
			case T__14:
			case T__22:
			case T__24:
			case T__31:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case IDENTIFIER:
			case CHAR:
			case STRING:
			case INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; embeddedStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 26, RULE_statementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 186; statement();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__22) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__31) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << IDENTIFIER) | (1L << CHAR) | (1L << STRING) | (1L << INTEGER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 28, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; Match(T__1);
			State = 193;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__22) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__31) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << IDENTIFIER) | (1L << CHAR) | (1L << STRING) | (1L << INTEGER))) != 0)) {
				{
				State = 192; statementList();
				}
			}

			State = 195; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SimpleEmbeddedStatementContext simpleEmbeddedStatement() {
			return GetRuleContext<SimpleEmbeddedStatementContext>(0);
		}
		public IfBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterIfBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitIfBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBodyContext ifBody() {
		IfBodyContext _localctx = new IfBodyContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifBody);
		try {
			State = 199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197; block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 198; simpleEmbeddedStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public IToken t;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 32, RULE_variableDeclaration);
		try {
			State = 211;
			switch (TokenStream.La(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; _localctx.t = Match(T__25);
				State = 202; identifier();
				State = 203; Match(T__5);
				State = 204; expression(0);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206; _localctx.t = Match(T__26);
				State = 207; identifier();
				State = 208; Match(T__5);
				State = 209; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExprContext : ParserRuleContext {
		public PrimaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpr; } }
	 
		public PrimaryExprContext() { }
		public virtual void CopyFrom(PrimaryExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LiteralExpContext : PrimaryExprContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpContext(PrimaryExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterLiteralExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitLiteralExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpContext : PrimaryExprContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisExpContext(PrimaryExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterParenthesisExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitParenthesisExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleNameExpContext : PrimaryExprContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SimpleNameExpContext(PrimaryExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterSimpleNameExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitSimpleNameExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleNameExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PredefTypeExpContext : PrimaryExprContext {
		public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public PredefTypeExpContext(PrimaryExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterPredefTypeExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitPredefTypeExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefTypeExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExprContext primaryExpr() {
		PrimaryExprContext _localctx = new PrimaryExprContext(Context, State);
		EnterRule(_localctx, 34, RULE_primaryExpr);
		try {
			State = 220;
			switch (TokenStream.La(1)) {
			case T__1:
			case T__7:
			case T__8:
			case T__14:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case CHAR:
			case STRING:
			case INTEGER:
				_localctx = new LiteralExpContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 213; literal();
				}
				break;
			case IDENTIFIER:
				_localctx = new SimpleNameExpContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; identifier();
				}
				break;
			case T__9:
				_localctx = new ParenthesisExpContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 215; Match(T__9);
				State = 216; expression(0);
				State = 217; Match(T__10);
				}
				break;
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
				_localctx = new PredefTypeExpContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 219; predefinedType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExprContext : ParserRuleContext {
		public PostfixExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpr; } }
	 
		public PostfixExprContext() { }
		public virtual void CopyFrom(PostfixExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FnCallExpContext : PostfixExprContext {
		public PostfixExprContext postfixExpr() {
			return GetRuleContext<PostfixExprContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public FnCallExpContext(PostfixExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterFnCallExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitFnCallExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFnCallExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MemberAccExpContext : PostfixExprContext {
		public PostfixExprContext postfixExpr() {
			return GetRuleContext<PostfixExprContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberAccExpContext(PostfixExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterMemberAccExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitMemberAccExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostfixExprPassthroughContext : PostfixExprContext {
		public PrimaryExprContext primaryExpr() {
			return GetRuleContext<PrimaryExprContext>(0);
		}
		public PostfixExprPassthroughContext(PostfixExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterPostfixExprPassthrough(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitPostfixExprPassthrough(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixExprPassthrough(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostfixOpExpContext : PostfixExprContext {
		public IToken uop;
		public PostfixExprContext postfixExpr() {
			return GetRuleContext<PostfixExprContext>(0);
		}
		public PostfixOpExpContext(PostfixExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterPostfixOpExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitPostfixOpExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostfixOpExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexExpContext : PostfixExprContext {
		public PostfixExprContext postfixExpr() {
			return GetRuleContext<PostfixExprContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IndexExpContext(PostfixExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterIndexExp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitIndexExp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExprContext postfixExpr() {
		return postfixExpr(0);
	}

	private PostfixExprContext postfixExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixExprContext _localctx = new PostfixExprContext(Context, _parentState);
		PostfixExprContext _prevctx = _localctx;
		int _startState = 36;
		EnterRecursionRule(_localctx, 36, RULE_postfixExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PostfixExprPassthroughContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 223; primaryExpr();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 243;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 241;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						{
						_localctx = new IndexExpContext(new PostfixExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpr);
						State = 225;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 226; Match(T__27);
						State = 227; expression(0);
						State = 228; Match(T__28);
						}
						break;
					case 2:
						{
						_localctx = new FnCallExpContext(new PostfixExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpr);
						State = 230;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 231; Match(T__9);
						State = 233;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__31) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << IDENTIFIER) | (1L << CHAR) | (1L << STRING) | (1L << INTEGER))) != 0)) {
							{
							State = 232; argumentList();
							}
						}

						State = 235; Match(T__10);
						}
						break;
					case 3:
						{
						_localctx = new MemberAccExpContext(new PostfixExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpr);
						State = 236;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 237; Match(T__11);
						State = 238; identifier();
						}
						break;
					case 4:
						{
						_localctx = new PostfixOpExpContext(new PostfixExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpr);
						State = 239;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 240;
						((PostfixOpExpContext)_localctx).uop = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==T__29 || _la==T__30) ) {
							((PostfixOpExpContext)_localctx).uop = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 245;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryExprContext : ParserRuleContext {
		public IToken uop;
		public PostfixExprContext postfixExpr() {
			return GetRuleContext<PostfixExprContext>(0);
		}
		public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public UnaryExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterUnaryExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitUnaryExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExprContext unaryExpr() {
		UnaryExprContext _localctx = new UnaryExprContext(Context, State);
		EnterRule(_localctx, 38, RULE_unaryExpr);
		int _la;
		try {
			State = 249;
			switch (TokenStream.La(1)) {
			case T__1:
			case T__7:
			case T__8:
			case T__9:
			case T__14:
			case T__39:
			case T__40:
			case T__41:
			case T__42:
			case T__43:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case IDENTIFIER:
			case CHAR:
			case STRING:
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246; postfixExpr(0);
				}
				break;
			case T__12:
			case T__13:
			case T__31:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				_localctx.uop = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__31))) != 0)) ) {
					_localctx.uop = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 248; unaryExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExprContext : ParserRuleContext {
		public IToken bop;
		public UnaryExprContext unaryExpr() {
			return GetRuleContext<UnaryExprContext>(0);
		}
		public MultiplicativeExprContext multiplicativeExpr() {
			return GetRuleContext<MultiplicativeExprContext>(0);
		}
		public MultiplicativeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExprContext multiplicativeExpr() {
		return multiplicativeExpr(0);
	}

	private MultiplicativeExprContext multiplicativeExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExprContext _localctx = new MultiplicativeExprContext(Context, _parentState);
		MultiplicativeExprContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_multiplicativeExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 252; unaryExpr();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 259;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MultiplicativeExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpr);
					State = 254;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 255;
					_localctx.bop = TokenStream.Lt(1);
					_la = TokenStream.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__32) | (1L << T__33) | (1L << T__34))) != 0)) ) {
						_localctx.bop = ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 256; unaryExpr();
					}
					} 
				}
				State = 261;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExprContext : ParserRuleContext {
		public IToken bop;
		public MultiplicativeExprContext multiplicativeExpr() {
			return GetRuleContext<MultiplicativeExprContext>(0);
		}
		public AdditiveExprContext additiveExpr() {
			return GetRuleContext<AdditiveExprContext>(0);
		}
		public AdditiveExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterAdditiveExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitAdditiveExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExprContext additiveExpr() {
		return additiveExpr(0);
	}

	private AdditiveExprContext additiveExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExprContext _localctx = new AdditiveExprContext(Context, _parentState);
		AdditiveExprContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_additiveExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 263; multiplicativeExpr(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 270;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AdditiveExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_additiveExpr);
					State = 265;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 266;
					_localctx.bop = TokenStream.Lt(1);
					_la = TokenStream.La(1);
					if ( !(_la==T__12 || _la==T__13) ) {
						_localctx.bop = ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 267; multiplicativeExpr(0);
					}
					} 
				}
				State = 272;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class RelationalExprContext : ParserRuleContext {
		public IToken bop;
		public AdditiveExprContext additiveExpr() {
			return GetRuleContext<AdditiveExprContext>(0);
		}
		public RelationalExprContext relationalExpr() {
			return GetRuleContext<RelationalExprContext>(0);
		}
		public RelationalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterRelationalExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitRelationalExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExprContext relationalExpr() {
		return relationalExpr(0);
	}

	private RelationalExprContext relationalExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExprContext _localctx = new RelationalExprContext(Context, _parentState);
		RelationalExprContext _prevctx = _localctx;
		int _startState = 44;
		EnterRecursionRule(_localctx, 44, RULE_relationalExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 274; additiveExpr(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 281;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new RelationalExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_relationalExpr);
					State = 276;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 277;
					_localctx.bop = TokenStream.Lt(1);
					_la = TokenStream.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17))) != 0)) ) {
						_localctx.bop = ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 278; additiveExpr(0);
					}
					} 
				}
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExprContext : ParserRuleContext {
		public IToken bop;
		public RelationalExprContext relationalExpr() {
			return GetRuleContext<RelationalExprContext>(0);
		}
		public EqualityExprContext equalityExpr() {
			return GetRuleContext<EqualityExprContext>(0);
		}
		public EqualityExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterEqualityExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitEqualityExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExprContext equalityExpr() {
		return equalityExpr(0);
	}

	private EqualityExprContext equalityExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExprContext _localctx = new EqualityExprContext(Context, _parentState);
		EqualityExprContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_equalityExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 285; relationalExpr(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 292;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EqualityExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_equalityExpr);
					State = 287;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 288;
					_localctx.bop = TokenStream.Lt(1);
					_la = TokenStream.La(1);
					if ( !(_la==T__18 || _la==T__19) ) {
						_localctx.bop = ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 289; relationalExpr(0);
					}
					} 
				}
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalAndExprContext : ParserRuleContext {
		public EqualityExprContext equalityExpr() {
			return GetRuleContext<EqualityExprContext>(0);
		}
		public ConditionalAndExprContext conditionalAndExpr() {
			return GetRuleContext<ConditionalAndExprContext>(0);
		}
		public ConditionalAndExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExprContext conditionalAndExpr() {
		return conditionalAndExpr(0);
	}

	private ConditionalAndExprContext conditionalAndExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionalAndExprContext _localctx = new ConditionalAndExprContext(Context, _parentState);
		ConditionalAndExprContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_conditionalAndExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 296; equalityExpr(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 303;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalAndExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalAndExpr);
					State = 298;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 299; Match(T__20);
					State = 300; equalityExpr(0);
					}
					} 
				}
				State = 305;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalOrExprContext : ParserRuleContext {
		public ConditionalAndExprContext conditionalAndExpr() {
			return GetRuleContext<ConditionalAndExprContext>(0);
		}
		public ConditionalOrExprContext conditionalOrExpr() {
			return GetRuleContext<ConditionalOrExprContext>(0);
		}
		public ConditionalOrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExprContext conditionalOrExpr() {
		return conditionalOrExpr(0);
	}

	private ConditionalOrExprContext conditionalOrExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ConditionalOrExprContext _localctx = new ConditionalOrExprContext(Context, _parentState);
		ConditionalOrExprContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_conditionalOrExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 307; conditionalAndExpr(0);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 314;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ConditionalOrExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_conditionalOrExpr);
					State = 309;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 310; Match(T__21);
					State = 311; conditionalAndExpr(0);
					}
					} 
				}
				State = 316;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalExprContext : ParserRuleContext {
		public ConditionalOrExprContext conditionalOrExpr() {
			return GetRuleContext<ConditionalOrExprContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConditionalExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConditionalExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConditionalExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExprContext conditionalExpr() {
		ConditionalExprContext _localctx = new ConditionalExprContext(Context, State);
		EnterRule(_localctx, 52, RULE_conditionalExpr);
		try {
			State = 324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 317; conditionalOrExpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 318; conditionalOrExpr(0);
				State = 319; Match(T__35);
				State = 320; expression(0);
				State = 321; Match(T__4);
				State = 322; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExprContext : ParserRuleContext {
		public IToken bop;
		public ConditionalExprContext conditionalExpr() {
			return GetRuleContext<ConditionalExprContext>(0);
		}
		public AssignmentExprContext assignmentExpr() {
			return GetRuleContext<AssignmentExprContext>(0);
		}
		public AssignmentExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterAssignmentExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitAssignmentExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExprContext assignmentExpr() {
		AssignmentExprContext _localctx = new AssignmentExprContext(Context, State);
		EnterRule(_localctx, 54, RULE_assignmentExpr);
		int _la;
		try {
			State = 331;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 326; conditionalExpr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 327; conditionalExpr();
				State = 328;
				_localctx.bop = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__5) | (1L << T__36) | (1L << T__37))) != 0)) ) {
					_localctx.bop = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 329; assignmentExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprPassthroughContext : ExpressionContext {
		public AssignmentExprContext assignmentExpr() {
			return GetRuleContext<AssignmentExprContext>(0);
		}
		public ExprPassthroughContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterExprPassthrough(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitExprPassthrough(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprPassthrough(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExprApplyAttributeContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ATTRIBUTE() { return GetToken(ChessVCParser.ATTRIBUTE, 0); }
		public ExprApplyAttributeContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterExprApplyAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitExprApplyAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprApplyAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExprPassthroughContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 334; assignmentExpr();
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 340;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprApplyAttributeContext(new ExpressionContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 336;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 337; Match(ATTRIBUTE);
					}
					} 
				}
				State = 342;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 58, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; argument();
			State = 348;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__38) {
				{
				{
				State = 344; Match(T__38);
				State = 345; argument();
				}
				}
				State = 350;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 60, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredefinedTypeContext : ParserRuleContext {
		public PredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefinedType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterPredefinedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitPredefinedType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefinedType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredefinedTypeContext predefinedType() {
		PredefinedTypeContext _localctx = new PredefinedTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_predefinedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ChessVCParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	 
		public LiteralContext() { }
		public virtual void CopyFrom(LiteralContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConstBoolTrueContext : LiteralContext {
		public ConstBoolTrueContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstBoolTrue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstBoolTrue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstBoolTrue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstCharContext : LiteralContext {
		public ITerminalNode CHAR() { return GetToken(ChessVCParser.CHAR, 0); }
		public ConstCharContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstChar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstChar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstBoolFalseContext : LiteralContext {
		public ConstBoolFalseContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstBoolFalse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstBoolFalse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstBoolFalse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstLambdaContext : LiteralContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LambdaexprContext lambdaexpr() {
			return GetRuleContext<LambdaexprContext>(0);
		}
		public ConstLambdaContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstLambda(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstLambda(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstLambda(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstNullContext : LiteralContext {
		public ConstNullContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstNull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstNull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstNull(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstSymmetryContext : LiteralContext {
		public ConstSymmetryContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstSymmetry(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstSymmetry(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSymmetry(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstStrgContext : LiteralContext {
		public ITerminalNode STRING() { return GetToken(ChessVCParser.STRING, 0); }
		public ConstStrgContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstStrg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstStrg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStrg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstDirContext : LiteralContext {
		public IToken m1;
		public IToken m2;
		public ITerminalNode[] INTEGER() { return GetTokens(ChessVCParser.INTEGER); }
		public ITerminalNode INTEGER(int i) {
			return GetToken(ChessVCParser.INTEGER, i);
		}
		public ConstDirContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstDir(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstDir(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDir(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstRangeContext : LiteralContext {
		public ITerminalNode[] INTEGER() { return GetTokens(ChessVCParser.INTEGER); }
		public ITerminalNode INTEGER(int i) {
			return GetToken(ChessVCParser.INTEGER, i);
		}
		public ConstRangeContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstRange(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstListContext : LiteralContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ConstListContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstIntContext : LiteralContext {
		public ITerminalNode INTEGER() { return GetToken(ChessVCParser.INTEGER, 0); }
		public ConstIntContext(LiteralContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.EnterConstInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IChessVCListener typedListener = listener as IChessVCListener;
			if (typedListener != null) typedListener.ExitConstInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IChessVCVisitor<TResult> typedVisitor = visitor as IChessVCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 66, RULE_literal);
		int _la;
		try {
			State = 398;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				_localctx = new ConstBoolTrueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 357; Match(T__7);
				}
				break;
			case 2:
				_localctx = new ConstBoolFalseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 358; Match(T__8);
				}
				break;
			case 3:
				_localctx = new ConstIntContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 359; Match(INTEGER);
				}
				break;
			case 4:
				_localctx = new ConstStrgContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 360; Match(STRING);
				}
				break;
			case 5:
				_localctx = new ConstCharContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 361; Match(CHAR);
				}
				break;
			case 6:
				_localctx = new ConstRangeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 362; Match(INTEGER);
				State = 363; Match(T__44);
				State = 364; Match(INTEGER);
				}
				break;
			case 7:
				_localctx = new ConstDirContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 365; Match(T__14);
				State = 367;
				_la = TokenStream.La(1);
				if (_la==T__13) {
					{
					State = 366; ((ConstDirContext)_localctx).m1 = Match(T__13);
					}
				}

				State = 369; Match(INTEGER);
				State = 370; Match(T__38);
				State = 372;
				_la = TokenStream.La(1);
				if (_la==T__13) {
					{
					State = 371; ((ConstDirContext)_localctx).m2 = Match(T__13);
					}
				}

				State = 374; Match(INTEGER);
				State = 375; Match(T__15);
				}
				break;
			case 8:
				_localctx = new ConstListContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 376; Match(T__1);
				State = 385;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__31) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << IDENTIFIER) | (1L << CHAR) | (1L << STRING) | (1L << INTEGER))) != 0)) {
					{
					State = 377; expression(0);
					State = 382;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==T__38) {
						{
						{
						State = 378; Match(T__38);
						State = 379; expression(0);
						}
						}
						State = 384;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					}
				}

				State = 387; Match(T__2);
				}
				break;
			case 9:
				_localctx = new ConstLambdaContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 388; Match(T__1);
				State = 389; identifier();
				State = 390; Match(T__4);
				State = 391; lambdaexpr(0);
				State = 392; Match(T__2);
				}
				break;
			case 10:
				_localctx = new ConstSymmetryContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 394; Match(T__45);
				}
				break;
			case 11:
				_localctx = new ConstSymmetryContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 395; Match(T__46);
				}
				break;
			case 12:
				_localctx = new ConstSymmetryContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 396; Match(T__47);
				}
				break;
			case 13:
				_localctx = new ConstNullContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 397; Match(T__48);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return lambdaexpr_sempred((LambdaexprContext)_localctx, predIndex);
		case 18: return postfixExpr_sempred((PostfixExprContext)_localctx, predIndex);
		case 20: return multiplicativeExpr_sempred((MultiplicativeExprContext)_localctx, predIndex);
		case 21: return additiveExpr_sempred((AdditiveExprContext)_localctx, predIndex);
		case 22: return relationalExpr_sempred((RelationalExprContext)_localctx, predIndex);
		case 23: return equalityExpr_sempred((EqualityExprContext)_localctx, predIndex);
		case 24: return conditionalAndExpr_sempred((ConditionalAndExprContext)_localctx, predIndex);
		case 25: return conditionalOrExpr_sempred((ConditionalOrExprContext)_localctx, predIndex);
		case 28: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool lambdaexpr_sempred(LambdaexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfixExpr_sempred(PostfixExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multiplicativeExpr_sempred(MultiplicativeExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpr_sempred(AdditiveExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpr_sempred(RelationalExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpr_sempred(EqualityExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool conditionalAndExpr_sempred(ConditionalAndExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 1);
		}
		return true;
	}
	private bool conditionalOrExpr_sempred(ConditionalOrExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 1);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3;\x193");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a");
		sb.Append("\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4");
		sb.Append("\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4");
		sb.Append("\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4\x17\t\x17");
		sb.Append("\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B\x4\x1C");
		sb.Append("\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!\t!");
		sb.Append("\x4\"\t\"\x4#\t#\x3\x2\a\x2H\n\x2\f\x2\xE\x2K\v\x2\x3\x3\x3");
		sb.Append("\x3\x5\x3O\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\a\x4U\n\x4\f\x4\xE\x4");
		sb.Append("X\v\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\a\x5");
		sb.Append("\x62\n\x5\f\x5\xE\x5\x65\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6");
		sb.Append("\x5\x6l\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3");
		sb.Append("\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x5\n~\n\n\x3\v\x3\v\x3\v\x3");
		sb.Append("\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x8A\n\v\x3\v\x3\v\x3\v");
		sb.Append("\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v");
		sb.Append("\a\v\x9B\n\v\f\v\xE\v\x9E\v\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f");
		sb.Append("\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\xAB\n\f\x3\f\x3\f\x3\f\x3\f\x5");
		sb.Append("\f\xB1\n\f\x3\r\x3\r\x5\r\xB5\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x5");
		sb.Append("\xE\xBB\n\xE\x3\xF\x6\xF\xBE\n\xF\r\xF\xE\xF\xBF\x3\x10\x3\x10");
		sb.Append("\x5\x10\xC4\n\x10\x3\x10\x3\x10\x3\x11\x3\x11\x5\x11\xCA\n\x11");
		sb.Append("\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3");
		sb.Append("\x12\x3\x12\x5\x12\xD6\n\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3");
		sb.Append("\x13\x3\x13\x3\x13\x5\x13\xDF\n\x13\x3\x14\x3\x14\x3\x14\x3");
		sb.Append("\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14");
		sb.Append("\xEC\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\a\x14\xF4");
		sb.Append("\n\x14\f\x14\xE\x14\xF7\v\x14\x3\x15\x3\x15\x3\x15\x5\x15\xFC");
		sb.Append("\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x104");
		sb.Append("\n\x16\f\x16\xE\x16\x107\v\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3");
		sb.Append("\x17\x3\x17\a\x17\x10F\n\x17\f\x17\xE\x17\x112\v\x17\x3\x18");
		sb.Append("\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x11A\n\x18\f\x18\xE");
		sb.Append("\x18\x11D\v\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\a");
		sb.Append("\x19\x125\n\x19\f\x19\xE\x19\x128\v\x19\x3\x1A\x3\x1A\x3\x1A");
		sb.Append("\x3\x1A\x3\x1A\x3\x1A\a\x1A\x130\n\x1A\f\x1A\xE\x1A\x133\v\x1A");
		sb.Append("\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\x13B\n\x1B");
		sb.Append("\f\x1B\xE\x1B\x13E\v\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C");
		sb.Append("\x3\x1C\x3\x1C\x5\x1C\x147\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D");
		sb.Append("\x3\x1D\x5\x1D\x14E\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E");
		sb.Append("\a\x1E\x155\n\x1E\f\x1E\xE\x1E\x158\v\x1E\x3\x1F\x3\x1F\x3\x1F");
		sb.Append("\a\x1F\x15D\n\x1F\f\x1F\xE\x1F\x160\v\x1F\x3 \x3 \x3!\x3!\x3");
		sb.Append("\"\x3\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\x172\n#");
		sb.Append("\x3#\x3#\x3#\x5#\x177\n#\x3#\x3#\x3#\x3#\x3#\x3#\a#\x17F\n#");
		sb.Append("\f#\xE#\x182\v#\x5#\x184\n#\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x3#");
		sb.Append("\x3#\x3#\x3#\x5#\x191\n#\x3#\x2\v\x14&*,.\x30\x32\x34:$\x2\x4");
		sb.Append("\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32");
		sb.Append("\x34\x36\x38:<>@\x42\x44\x2\n\x3\x2\xF\x10\x3\x2\x11\x14\x3");
		sb.Append("\x2\x15\x16\x3\x2 !\x4\x2\xF\x10\"\"\x3\x2#%\x4\x2\b\b\'(\x3");
		sb.Append("\x2*.\x1AD\x2I\x3\x2\x2\x2\x4N\x3\x2\x2\x2\x6P\x3\x2\x2\x2\b");
		sb.Append("[\x3\x2\x2\x2\nk\x3\x2\x2\x2\fm\x3\x2\x2\x2\xEr\x3\x2\x2\x2");
		sb.Append("\x10u\x3\x2\x2\x2\x12}\x3\x2\x2\x2\x14\x89\x3\x2\x2\x2\x16\xB0");
		sb.Append("\x3\x2\x2\x2\x18\xB4\x3\x2\x2\x2\x1A\xBA\x3\x2\x2\x2\x1C\xBD");
		sb.Append("\x3\x2\x2\x2\x1E\xC1\x3\x2\x2\x2 \xC9\x3\x2\x2\x2\"\xD5\x3\x2");
		sb.Append("\x2\x2$\xDE\x3\x2\x2\x2&\xE0\x3\x2\x2\x2(\xFB\x3\x2\x2\x2*\xFD");
		sb.Append("\x3\x2\x2\x2,\x108\x3\x2\x2\x2.\x113\x3\x2\x2\x2\x30\x11E\x3");
		sb.Append("\x2\x2\x2\x32\x129\x3\x2\x2\x2\x34\x134\x3\x2\x2\x2\x36\x146");
		sb.Append("\x3\x2\x2\x2\x38\x14D\x3\x2\x2\x2:\x14F\x3\x2\x2\x2<\x159\x3");
		sb.Append("\x2\x2\x2>\x161\x3\x2\x2\x2@\x163\x3\x2\x2\x2\x42\x165\x3\x2");
		sb.Append("\x2\x2\x44\x190\x3\x2\x2\x2\x46H\x5\x4\x3\x2G\x46\x3\x2\x2\x2");
		sb.Append("HK\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2J\x3\x3\x2\x2\x2K");
		sb.Append("I\x3\x2\x2\x2LO\x5\b\x5\x2MO\x5\x6\x4\x2NL\x3\x2\x2\x2NM\x3");
		sb.Append("\x2\x2\x2O\x5\x3\x2\x2\x2PQ\a\x3\x2\x2QR\x5\x42\"\x2RV\a\x4");
		sb.Append("\x2\x2SU\x5\n\x6\x2TS\x3\x2\x2\x2UX\x3\x2\x2\x2VT\x3\x2\x2\x2");
		sb.Append("VW\x3\x2\x2\x2WY\x3\x2\x2\x2XV\x3\x2\x2\x2YZ\a\x5\x2\x2Z\a\x3");
		sb.Append("\x2\x2\x2[\\\a\x6\x2\x2\\]\x5\x42\"\x2]^\a\a\x2\x2^_\x5\x42");
		sb.Append("\"\x2_\x63\a\x4\x2\x2`\x62\x5\n\x6\x2\x61`\x3\x2\x2\x2\x62\x65");
		sb.Append("\x3\x2\x2\x2\x63\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64\x66");
		sb.Append("\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x66g\a\x5\x2\x2g\t\x3\x2\x2");
		sb.Append("\x2hl\x5\f\a\x2il\x5\xE\b\x2jl\x5\x10\t\x2kh\x3\x2\x2\x2ki\x3");
		sb.Append("\x2\x2\x2kj\x3\x2\x2\x2l\v\x3\x2\x2\x2mn\x5\x42\"\x2no\a\b\x2");
		sb.Append("\x2op\x5\x44#\x2pq\a\t\x2\x2q\r\x3\x2\x2\x2rs\x5\x42\"\x2st");
		sb.Append("\x5\x1E\x10\x2t\xF\x3\x2\x2\x2uv\x5@!\x2vw\x5\x42\"\x2wx\a\t");
		sb.Append("\x2\x2x\x11\x3\x2\x2\x2y~\x5\x42\"\x2z~\a\n\x2\x2{~\a\v\x2\x2");
		sb.Append("|~\a;\x2\x2}y\x3\x2\x2\x2}z\x3\x2\x2\x2}{\x3\x2\x2\x2}|\x3\x2");
		sb.Append("\x2\x2~\x13\x3\x2\x2\x2\x7F\x80\b\v\x1\x2\x80\x8A\x5\x12\n\x2");
		sb.Append("\x81\x82\a\f\x2\x2\x82\x83\x5\x14\v\x2\x83\x84\a\r\x2\x2\x84");
		sb.Append("\x8A\x3\x2\x2\x2\x85\x86\x5\x42\"\x2\x86\x87\a\xE\x2\x2\x87");
		sb.Append("\x88\x5\x42\"\x2\x88\x8A\x3\x2\x2\x2\x89\x7F\x3\x2\x2\x2\x89");
		sb.Append("\x81\x3\x2\x2\x2\x89\x85\x3\x2\x2\x2\x8A\x9C\x3\x2\x2\x2\x8B");
		sb.Append("\x8C\f\a\x2\x2\x8C\x8D\t\x2\x2\x2\x8D\x9B\x5\x14\v\b\x8E\x8F");
		sb.Append("\f\x6\x2\x2\x8F\x90\t\x3\x2\x2\x90\x9B\x5\x14\v\a\x91\x92\f");
		sb.Append("\x5\x2\x2\x92\x93\t\x4\x2\x2\x93\x9B\x5\x14\v\x6\x94\x95\f\x4");
		sb.Append("\x2\x2\x95\x96\a\x17\x2\x2\x96\x9B\x5\x14\v\x5\x97\x98\f\x3");
		sb.Append("\x2\x2\x98\x99\a\x18\x2\x2\x99\x9B\x5\x14\v\x4\x9A\x8B\x3\x2");
		sb.Append("\x2\x2\x9A\x8E\x3\x2\x2\x2\x9A\x91\x3\x2\x2\x2\x9A\x94\x3\x2");
		sb.Append("\x2\x2\x9A\x97\x3\x2\x2\x2\x9B\x9E\x3\x2\x2\x2\x9C\x9A\x3\x2");
		sb.Append("\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x15\x3\x2\x2\x2\x9E\x9C\x3\x2");
		sb.Append("\x2\x2\x9F\xB1\a\t\x2\x2\xA0\xA1\x5:\x1E\x2\xA1\xA2\a\t\x2\x2");
		sb.Append("\xA2\xB1\x3\x2\x2\x2\xA3\xA4\a\x19\x2\x2\xA4\xA5\a\f\x2\x2\xA5");
		sb.Append("\xA6\x5:\x1E\x2\xA6\xA7\a\r\x2\x2\xA7\xAA\x5 \x11\x2\xA8\xA9");
		sb.Append("\a\x1A\x2\x2\xA9\xAB\x5 \x11\x2\xAA\xA8\x3\x2\x2\x2\xAA\xAB");
		sb.Append("\x3\x2\x2\x2\xAB\xB1\x3\x2\x2\x2\xAC\xAD\a\x1B\x2\x2\xAD\xAE");
		sb.Append("\x5:\x1E\x2\xAE\xAF\a\t\x2\x2\xAF\xB1\x3\x2\x2\x2\xB0\x9F\x3");
		sb.Append("\x2\x2\x2\xB0\xA0\x3\x2\x2\x2\xB0\xA3\x3\x2\x2\x2\xB0\xAC\x3");
		sb.Append("\x2\x2\x2\xB1\x17\x3\x2\x2\x2\xB2\xB5\x5\x1E\x10\x2\xB3\xB5");
		sb.Append("\x5\x16\f\x2\xB4\xB2\x3\x2\x2\x2\xB4\xB3\x3\x2\x2\x2\xB5\x19");
		sb.Append("\x3\x2\x2\x2\xB6\xB7\x5\"\x12\x2\xB7\xB8\a\t\x2\x2\xB8\xBB\x3");
		sb.Append("\x2\x2\x2\xB9\xBB\x5\x18\r\x2\xBA\xB6\x3\x2\x2\x2\xBA\xB9\x3");
		sb.Append("\x2\x2\x2\xBB\x1B\x3\x2\x2\x2\xBC\xBE\x5\x1A\xE\x2\xBD\xBC\x3");
		sb.Append("\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xBD\x3\x2\x2\x2\xBF\xC0\x3");
		sb.Append("\x2\x2\x2\xC0\x1D\x3\x2\x2\x2\xC1\xC3\a\x4\x2\x2\xC2\xC4\x5");
		sb.Append("\x1C\xF\x2\xC3\xC2\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\xC5\x3");
		sb.Append("\x2\x2\x2\xC5\xC6\a\x5\x2\x2\xC6\x1F\x3\x2\x2\x2\xC7\xCA\x5");
		sb.Append("\x1E\x10\x2\xC8\xCA\x5\x16\f\x2\xC9\xC7\x3\x2\x2\x2\xC9\xC8");
		sb.Append("\x3\x2\x2\x2\xCA!\x3\x2\x2\x2\xCB\xCC\a\x1C\x2\x2\xCC\xCD\x5");
		sb.Append("\x42\"\x2\xCD\xCE\a\b\x2\x2\xCE\xCF\x5:\x1E\x2\xCF\xD6\x3\x2");
		sb.Append("\x2\x2\xD0\xD1\a\x1D\x2\x2\xD1\xD2\x5\x42\"\x2\xD2\xD3\a\b\x2");
		sb.Append("\x2\xD3\xD4\x5:\x1E\x2\xD4\xD6\x3\x2\x2\x2\xD5\xCB\x3\x2\x2");
		sb.Append("\x2\xD5\xD0\x3\x2\x2\x2\xD6#\x3\x2\x2\x2\xD7\xDF\x5\x44#\x2");
		sb.Append("\xD8\xDF\x5\x42\"\x2\xD9\xDA\a\f\x2\x2\xDA\xDB\x5:\x1E\x2\xDB");
		sb.Append("\xDC\a\r\x2\x2\xDC\xDF\x3\x2\x2\x2\xDD\xDF\x5@!\x2\xDE\xD7\x3");
		sb.Append("\x2\x2\x2\xDE\xD8\x3\x2\x2\x2\xDE\xD9\x3\x2\x2\x2\xDE\xDD\x3");
		sb.Append("\x2\x2\x2\xDF%\x3\x2\x2\x2\xE0\xE1\b\x14\x1\x2\xE1\xE2\x5$\x13");
		sb.Append("\x2\xE2\xF5\x3\x2\x2\x2\xE3\xE4\f\a\x2\x2\xE4\xE5\a\x1E\x2\x2");
		sb.Append("\xE5\xE6\x5:\x1E\x2\xE6\xE7\a\x1F\x2\x2\xE7\xF4\x3\x2\x2\x2");
		sb.Append("\xE8\xE9\f\x6\x2\x2\xE9\xEB\a\f\x2\x2\xEA\xEC\x5<\x1F\x2\xEB");
		sb.Append("\xEA\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED");
		sb.Append("\xF4\a\r\x2\x2\xEE\xEF\f\x5\x2\x2\xEF\xF0\a\xE\x2\x2\xF0\xF4");
		sb.Append("\x5\x42\"\x2\xF1\xF2\f\x4\x2\x2\xF2\xF4\t\x5\x2\x2\xF3\xE3\x3");
		sb.Append("\x2\x2\x2\xF3\xE8\x3\x2\x2\x2\xF3\xEE\x3\x2\x2\x2\xF3\xF1\x3");
		sb.Append("\x2\x2\x2\xF4\xF7\x3\x2\x2\x2\xF5\xF3\x3\x2\x2\x2\xF5\xF6\x3");
		sb.Append("\x2\x2\x2\xF6\'\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF8\xFC\x5&");
		sb.Append("\x14\x2\xF9\xFA\t\x6\x2\x2\xFA\xFC\x5(\x15\x2\xFB\xF8\x3\x2");
		sb.Append("\x2\x2\xFB\xF9\x3\x2\x2\x2\xFC)\x3\x2\x2\x2\xFD\xFE\b\x16\x1");
		sb.Append("\x2\xFE\xFF\x5(\x15\x2\xFF\x105\x3\x2\x2\x2\x100\x101\f\x3\x2");
		sb.Append("\x2\x101\x102\t\a\x2\x2\x102\x104\x5(\x15\x2\x103\x100\x3\x2");
		sb.Append("\x2\x2\x104\x107\x3\x2\x2\x2\x105\x103\x3\x2\x2\x2\x105\x106");
		sb.Append("\x3\x2\x2\x2\x106+\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2\x108\x109");
		sb.Append("\b\x17\x1\x2\x109\x10A\x5*\x16\x2\x10A\x110\x3\x2\x2\x2\x10B");
		sb.Append("\x10C\f\x3\x2\x2\x10C\x10D\t\x2\x2\x2\x10D\x10F\x5*\x16\x2\x10E");
		sb.Append("\x10B\x3\x2\x2\x2\x10F\x112\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2");
		sb.Append("\x110\x111\x3\x2\x2\x2\x111-\x3\x2\x2\x2\x112\x110\x3\x2\x2");
		sb.Append("\x2\x113\x114\b\x18\x1\x2\x114\x115\x5,\x17\x2\x115\x11B\x3");
		sb.Append("\x2\x2\x2\x116\x117\f\x3\x2\x2\x117\x118\t\x3\x2\x2\x118\x11A");
		sb.Append("\x5,\x17\x2\x119\x116\x3\x2\x2\x2\x11A\x11D\x3\x2\x2\x2\x11B");
		sb.Append("\x119\x3\x2\x2\x2\x11B\x11C\x3\x2\x2\x2\x11C/\x3\x2\x2\x2\x11D");
		sb.Append("\x11B\x3\x2\x2\x2\x11E\x11F\b\x19\x1\x2\x11F\x120\x5.\x18\x2");
		sb.Append("\x120\x126\x3\x2\x2\x2\x121\x122\f\x3\x2\x2\x122\x123\t\x4\x2");
		sb.Append("\x2\x123\x125\x5.\x18\x2\x124\x121\x3\x2\x2\x2\x125\x128\x3");
		sb.Append("\x2\x2\x2\x126\x124\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127\x31");
		sb.Append("\x3\x2\x2\x2\x128\x126\x3\x2\x2\x2\x129\x12A\b\x1A\x1\x2\x12A");
		sb.Append("\x12B\x5\x30\x19\x2\x12B\x131\x3\x2\x2\x2\x12C\x12D\f\x3\x2");
		sb.Append("\x2\x12D\x12E\a\x17\x2\x2\x12E\x130\x5\x30\x19\x2\x12F\x12C");
		sb.Append("\x3\x2\x2\x2\x130\x133\x3\x2\x2\x2\x131\x12F\x3\x2\x2\x2\x131");
		sb.Append("\x132\x3\x2\x2\x2\x132\x33\x3\x2\x2\x2\x133\x131\x3\x2\x2\x2");
		sb.Append("\x134\x135\b\x1B\x1\x2\x135\x136\x5\x32\x1A\x2\x136\x13C\x3");
		sb.Append("\x2\x2\x2\x137\x138\f\x3\x2\x2\x138\x139\a\x18\x2\x2\x139\x13B");
		sb.Append("\x5\x32\x1A\x2\x13A\x137\x3\x2\x2\x2\x13B\x13E\x3\x2\x2\x2\x13C");
		sb.Append("\x13A\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x35\x3\x2\x2\x2");
		sb.Append("\x13E\x13C\x3\x2\x2\x2\x13F\x147\x5\x34\x1B\x2\x140\x141\x5");
		sb.Append("\x34\x1B\x2\x141\x142\a&\x2\x2\x142\x143\x5:\x1E\x2\x143\x144");
		sb.Append("\a\a\x2\x2\x144\x145\x5:\x1E\x2\x145\x147\x3\x2\x2\x2\x146\x13F");
		sb.Append("\x3\x2\x2\x2\x146\x140\x3\x2\x2\x2\x147\x37\x3\x2\x2\x2\x148");
		sb.Append("\x14E\x5\x36\x1C\x2\x149\x14A\x5\x36\x1C\x2\x14A\x14B\t\b\x2");
		sb.Append("\x2\x14B\x14C\x5\x38\x1D\x2\x14C\x14E\x3\x2\x2\x2\x14D\x148");
		sb.Append("\x3\x2\x2\x2\x14D\x149\x3\x2\x2\x2\x14E\x39\x3\x2\x2\x2\x14F");
		sb.Append("\x150\b\x1E\x1\x2\x150\x151\x5\x38\x1D\x2\x151\x156\x3\x2\x2");
		sb.Append("\x2\x152\x153\f\x3\x2\x2\x153\x155\a\x37\x2\x2\x154\x152\x3");
		sb.Append("\x2\x2\x2\x155\x158\x3\x2\x2\x2\x156\x154\x3\x2\x2\x2\x156\x157");
		sb.Append("\x3\x2\x2\x2\x157;\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2\x159\x15E");
		sb.Append("\x5> \x2\x15A\x15B\a)\x2\x2\x15B\x15D\x5> \x2\x15C\x15A\x3\x2");
		sb.Append("\x2\x2\x15D\x160\x3\x2\x2\x2\x15E\x15C\x3\x2\x2\x2\x15E\x15F");
		sb.Append("\x3\x2\x2\x2\x15F=\x3\x2\x2\x2\x160\x15E\x3\x2\x2\x2\x161\x162");
		sb.Append("\x5:\x1E\x2\x162?\x3\x2\x2\x2\x163\x164\t\t\x2\x2\x164\x41\x3");
		sb.Append("\x2\x2\x2\x165\x166\a\x38\x2\x2\x166\x43\x3\x2\x2\x2\x167\x191");
		sb.Append("\a\n\x2\x2\x168\x191\a\v\x2\x2\x169\x191\a;\x2\x2\x16A\x191");
		sb.Append("\a:\x2\x2\x16B\x191\a\x39\x2\x2\x16C\x16D\a;\x2\x2\x16D\x16E");
		sb.Append("\a/\x2\x2\x16E\x191\a;\x2\x2\x16F\x171\a\x11\x2\x2\x170\x172");
		sb.Append("\a\x10\x2\x2\x171\x170\x3\x2\x2\x2\x171\x172\x3\x2\x2\x2\x172");
		sb.Append("\x173\x3\x2\x2\x2\x173\x174\a;\x2\x2\x174\x176\a)\x2\x2\x175");
		sb.Append("\x177\a\x10\x2\x2\x176\x175\x3\x2\x2\x2\x176\x177\x3\x2\x2\x2");
		sb.Append("\x177\x178\x3\x2\x2\x2\x178\x179\a;\x2\x2\x179\x191\a\x12\x2");
		sb.Append("\x2\x17A\x183\a\x4\x2\x2\x17B\x180\x5:\x1E\x2\x17C\x17D\a)\x2");
		sb.Append("\x2\x17D\x17F\x5:\x1E\x2\x17E\x17C\x3\x2\x2\x2\x17F\x182\x3");
		sb.Append("\x2\x2\x2\x180\x17E\x3\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181\x184");
		sb.Append("\x3\x2\x2\x2\x182\x180\x3\x2\x2\x2\x183\x17B\x3\x2\x2\x2\x183");
		sb.Append("\x184\x3\x2\x2\x2\x184\x185\x3\x2\x2\x2\x185\x191\a\x5\x2\x2");
		sb.Append("\x186\x187\a\x4\x2\x2\x187\x188\x5\x42\"\x2\x188\x189\a\a\x2");
		sb.Append("\x2\x189\x18A\x5\x14\v\x2\x18A\x18B\a\x5\x2\x2\x18B\x191\x3");
		sb.Append("\x2\x2\x2\x18C\x191\a\x30\x2\x2\x18D\x191\a\x31\x2\x2\x18E\x191");
		sb.Append("\a\x32\x2\x2\x18F\x191\a\x33\x2\x2\x190\x167\x3\x2\x2\x2\x190");
		sb.Append("\x168\x3\x2\x2\x2\x190\x169\x3\x2\x2\x2\x190\x16A\x3\x2\x2\x2");
		sb.Append("\x190\x16B\x3\x2\x2\x2\x190\x16C\x3\x2\x2\x2\x190\x16F\x3\x2");
		sb.Append("\x2\x2\x190\x17A\x3\x2\x2\x2\x190\x186\x3\x2\x2\x2\x190\x18C");
		sb.Append("\x3\x2\x2\x2\x190\x18D\x3\x2\x2\x2\x190\x18E\x3\x2\x2\x2\x190");
		sb.Append("\x18F\x3\x2\x2\x2\x191\x45\x3\x2\x2\x2\'INV\x63k}\x89\x9A\x9C");
		sb.Append("\xAA\xB0\xB4\xBA\xBF\xC3\xC9\xD5\xDE\xEB\xF3\xF5\xFB\x105\x110");
		sb.Append("\x11B\x126\x131\x13C\x146\x14D\x156\x15E\x171\x176\x180\x183");
		sb.Append("\x190");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
