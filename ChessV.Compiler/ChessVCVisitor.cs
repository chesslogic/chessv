//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\greg\workspace\ChessVCParser\ChessVC.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="ChessVCParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public interface IChessVCVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.unit"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnit([NotNull] ChessVCParser.UnitContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclaration([NotNull] ChessVCParser.DeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.pieceTypeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPieceTypeDeclaration([NotNull] ChessVCParser.PieceTypeDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.gameDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGameDeclaration([NotNull] ChessVCParser.GameDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.declMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclMember([NotNull] ChessVCParser.DeclMemberContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.constructorAssign"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstructorAssign([NotNull] ChessVCParser.ConstructorAssignContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.functionDefn"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionDefn([NotNull] ChessVCParser.FunctionDefnContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.memberDefn"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberDefn([NotNull] ChessVCParser.MemberDefnContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lambdaID</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaprimary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLambdaID([NotNull] ChessVCParser.LambdaIDContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lambdaConstBool</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaprimary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLambdaConstBool([NotNull] ChessVCParser.LambdaConstBoolContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lambdaConstInt</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaprimary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLambdaConstInt([NotNull] ChessVCParser.LambdaConstIntContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lambdaPri</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLambdaPri([NotNull] ChessVCParser.LambdaPriContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lambdaEqualtiy</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLambdaEqualtiy([NotNull] ChessVCParser.LambdaEqualtiyContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lambdaAnd</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLambdaAnd([NotNull] ChessVCParser.LambdaAndContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lambdaParen</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLambdaParen([NotNull] ChessVCParser.LambdaParenContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lambdaDot</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLambdaDot([NotNull] ChessVCParser.LambdaDotContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lambdaOr</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLambdaOr([NotNull] ChessVCParser.LambdaOrContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lambdaAdd</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLambdaAdd([NotNull] ChessVCParser.LambdaAddContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>lambdaCompare</c>
	/// labeled alternative in <see cref="ChessVCParser.lambdaexpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLambdaCompare([NotNull] ChessVCParser.LambdaCompareContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>theEmptyStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTheEmptyStatement([NotNull] ChessVCParser.TheEmptyStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionStatement([NotNull] ChessVCParser.ExpressionStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ifStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] ChessVCParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>returnStatement</c>
	/// labeled alternative in <see cref="ChessVCParser.simpleEmbeddedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStatement([NotNull] ChessVCParser.ReturnStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.embeddedStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEmbeddedStatement([NotNull] ChessVCParser.EmbeddedStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] ChessVCParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.statementList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatementList([NotNull] ChessVCParser.StatementListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] ChessVCParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.ifBody"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfBody([NotNull] ChessVCParser.IfBodyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.variableDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableDeclaration([NotNull] ChessVCParser.VariableDeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>literalExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralExp([NotNull] ChessVCParser.LiteralExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>simpleNameExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSimpleNameExp([NotNull] ChessVCParser.SimpleNameExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>parenthesisExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesisExp([NotNull] ChessVCParser.ParenthesisExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>predefTypeExp</c>
	/// labeled alternative in <see cref="ChessVCParser.primaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPredefTypeExp([NotNull] ChessVCParser.PredefTypeExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>fnCallExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFnCallExp([NotNull] ChessVCParser.FnCallExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>memberAccExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMemberAccExp([NotNull] ChessVCParser.MemberAccExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>postfixExprPassthrough</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPostfixExprPassthrough([NotNull] ChessVCParser.PostfixExprPassthroughContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>postfixOpExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPostfixOpExp([NotNull] ChessVCParser.PostfixOpExpContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>indexExp</c>
	/// labeled alternative in <see cref="ChessVCParser.postfixExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIndexExp([NotNull] ChessVCParser.IndexExpContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.unaryExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUnaryExpr([NotNull] ChessVCParser.UnaryExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.multiplicativeExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiplicativeExpr([NotNull] ChessVCParser.MultiplicativeExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.additiveExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAdditiveExpr([NotNull] ChessVCParser.AdditiveExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.relationalExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelationalExpr([NotNull] ChessVCParser.RelationalExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.equalityExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqualityExpr([NotNull] ChessVCParser.EqualityExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.conditionalAndExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConditionalAndExpr([NotNull] ChessVCParser.ConditionalAndExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.conditionalOrExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConditionalOrExpr([NotNull] ChessVCParser.ConditionalOrExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.conditionalExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConditionalExpr([NotNull] ChessVCParser.ConditionalExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.assignmentExpr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignmentExpr([NotNull] ChessVCParser.AssignmentExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>exprPassthrough</c>
	/// labeled alternative in <see cref="ChessVCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprPassthrough([NotNull] ChessVCParser.ExprPassthroughContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>exprApplyAttribute</c>
	/// labeled alternative in <see cref="ChessVCParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExprApplyAttribute([NotNull] ChessVCParser.ExprApplyAttributeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.argumentList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgumentList([NotNull] ChessVCParser.ArgumentListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.argument"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArgument([NotNull] ChessVCParser.ArgumentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.predefinedType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPredefinedType([NotNull] ChessVCParser.PredefinedTypeContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ChessVCParser.identifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifier([NotNull] ChessVCParser.IdentifierContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ConstBoolTrue</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstBoolTrue([NotNull] ChessVCParser.ConstBoolTrueContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ConstBoolFalse</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstBoolFalse([NotNull] ChessVCParser.ConstBoolFalseContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ConstInt</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstInt([NotNull] ChessVCParser.ConstIntContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ConstStrg</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstStrg([NotNull] ChessVCParser.ConstStrgContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ConstChar</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstChar([NotNull] ChessVCParser.ConstCharContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ConstRange</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstRange([NotNull] ChessVCParser.ConstRangeContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ConstDir</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstDir([NotNull] ChessVCParser.ConstDirContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ConstList</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstList([NotNull] ChessVCParser.ConstListContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ConstLambda</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstLambda([NotNull] ChessVCParser.ConstLambdaContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ConstSymmetry</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstSymmetry([NotNull] ChessVCParser.ConstSymmetryContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ConstNull</c>
	/// labeled alternative in <see cref="ChessVCParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstNull([NotNull] ChessVCParser.ConstNullContext context);
}
